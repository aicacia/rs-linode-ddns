/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostLinodeInstanceRequest {
    /// __Write-only__ A list of public SSH keys that will be automatically appended to the root user's `~/.ssh/authorized_keys` file when deploying from an Image.
    #[serde(rename = "authorized_keys", skip_serializing_if = "Option::is_none")]
    pub authorized_keys: Option<Vec<String>>,
    /// __Write-only__ A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.
    #[serde(rename = "authorized_users", skip_serializing_if = "Option::is_none")]
    pub authorized_users: Option<Vec<String>>,
    /// __Write-only__ This field defaults to `true` if the Linode is created with an Image or from a Backup. If it is deployed from an Image or a Backup and you wish it to remain `offline` after deployment, set this to `false`.
    #[serde(rename = "booted", skip_serializing_if = "Option::is_none")]
    pub booted: Option<bool>,
    /// __Limited availability__ Local disk encryption ensures that your data stored on Linodes is secured. Disk encryption protects against unauthorized data access by keeping the data encrypted if the disk is ever removed from the data center, decommissioned, or disposed of. The platform manages the encryption and decryption for you.  By default, encryption is `enabled` on all Linodes. If you opted out of encryption or if the Linode was created prior to local disk encryption support, you can encrypt your data using [Rebuild](https://techdocs.akamai.com/linode-api/reference/post-rebuild-linode-instance).
    #[serde(rename = "disk_encryption", skip_serializing_if = "Option::is_none")]
    pub disk_encryption: Option<DiskEncryptionEnum>,
    /// An Image ID to deploy the Linode Disk from.  Run the [List images](https://techdocs.akamai.com/linode-api/reference/get-images) operation with authentication to view all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Run the [Update a user's grants](https://techdocs.akamai.com/linode-api/reference/put-user-grants) operation to adjust permissions for an Account Image.
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<models::PostLinodeInstanceRequestAllOfMetadata>,
    /// __Write-only__ This sets the root user's password on a newly created Linode Disk when deploying from an Image.  - __Required__ when creating a Linode Disk from an Image, including when using a StackScript.  - Must meet a password strength score requirement that is calculated internally by the API. If the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.
    #[serde(rename = "root_pass", skip_serializing_if = "Option::is_none")]
    pub root_pass: Option<String>,
    /// This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](https://www.linode.com/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.  This field is required to be valid JSON.  Total length cannot exceed 65,535 characters.
    #[serde(rename = "stackscript_data", skip_serializing_if = "Option::is_none")]
    pub stackscript_data: Option<serde_json::Value>,
    /// A StackScript ID that will cause the referenced StackScript to be run during deployment of this Linode. A compatible `image` is required to use a StackScript. To get a list of available StackScript and their permitted Images, run [List StackScripts](https://techdocs.akamai.com/linode-api/reference/get-stack-scripts). This field cannot be used when deploying from a Backup or a Private Image.
    #[serde(rename = "stackscript_id", skip_serializing_if = "Option::is_none")]
    pub stackscript_id: Option<i32>,
    /// A Backup ID from another Linode's available backups. Your User must have `read_write` access to that Linode, the Backup must have a `status` of `successful`, and the Linode must be deployed to the same `region` as the Backup. Run [List backups](https://techdocs.akamai.com/linode-api/reference/get-backups) for a Linode's available backups.  This field and the `image` field are mutually exclusive.
    #[serde(rename = "backup_id", skip_serializing_if = "Option::is_none")]
    pub backup_id: Option<i32>,
    /// If this field is set to `true`, the created Linode will automatically be enrolled in the Linode Backup service. This will incur an additional charge. The cost for the Backup service is dependent on the Type of Linode deployed.  This option is always treated as `true` if the account-wide `backups_enabled` setting is `true`.  See [Get account settings](https://techdocs.akamai.com/linode-api/reference/get-account-settings) for more information.  Backup pricing is included in the response from [List types](https://techdocs.akamai.com/linode-api/reference/get-linode-types)
    #[serde(rename = "backups_enabled", skip_serializing_if = "Option::is_none")]
    pub backups_enabled: Option<bool>,
    /// The `id` of the Firewall to attach this Linode to upon creation.
    #[serde(rename = "firewall_id", skip_serializing_if = "Option::is_none")]
    pub firewall_id: Option<i32>,
    /// __Deprecated__, __Filterable__ The group label for this Linode.
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// An array of Network Interfaces to add to this Linode's Configuration Profile. At least one and up to three Interface objects can exist in this array. The position in the array determines which of the Linode's network Interfaces is configured:  - First [0]:  eth0 - Second [1]: eth1 - Third [2]:  eth2  When updating a Linode's Interfaces, _each Interface must be redefined_. An empty `interfaces` array results in a default `public` type Interface configuration only.  If no public Interface is configured, public IP addresses are still assigned to the Linode but will not be usable without manual configuration.  __Note__. Changes to Linode Interface configurations can be enabled by rebooting the Linode.  `vpc` details  See the [VPC documentation](https://www.linode.com/docs/products/networking/vpc/#technical-specifications) guide for its specifications and limitations.  `vlan` details  - Only Next Generation Network (NGN) data centers support VLANs. Run the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation to view the capabilities of data center regions. If a VLAN is attached to your Linode and you attempt to migrate or clone it to a non-NGN data center, the migration or cloning will not initiate. If a Linode cannot be migrated or cloned because of an incompatibility, you will be prompted to select a different data center or contact support. - See the [VLANs Overview](https://www.linode.com/docs/products/networking/vlans/#technical-specifications) guide to view additional specifications and limitations.
    #[serde(rename = "interfaces", skip_serializing_if = "Option::is_none")]
    pub interfaces: Option<Vec<models::PostLinodeInstanceRequestAllOfInterfacesInner>>,
    /// __Filterable__ Provides a name for the Linode. If not provided, the API generates one for it.  Linode labels have the following constraints:  - It needs to begin and end with an alphanumeric character. - It can only consist of alphanumeric characters, hyphens (`-`), underscores (`_`) or periods (`.`). - Cannot have two hyphens (`--`), underscores (`__`) or periods (`..`) in a row.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    #[serde(rename = "placement_group", skip_serializing_if = "Option::is_none")]
    pub placement_group: Option<models::PostLinodeInstanceRequestAllOfPlacementGroup>,
    /// If `true`, the created Linode will have private networking enabled and assigned a private IPv4 address.
    #[serde(rename = "private_ip", skip_serializing_if = "Option::is_none")]
    pub private_ip: Option<bool>,
    /// The [region](https://techdocs.akamai.com/linode-api/reference/get-regions) where the Linode will be located.
    #[serde(rename = "region")]
    pub region: String,
    /// When deploying from an Image, this field is optional, otherwise it is ignored. This is used to set the swap disk size for the newly created Linode.
    #[serde(rename = "swap_size", skip_serializing_if = "Option::is_none")]
    pub swap_size: Option<i32>,
    /// __Filterable__ Tags to help you organize your content.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The [Linode type](https://techdocs.akamai.com/linode-api/reference/get-linode-types) of the Linode you are creating.
    #[serde(rename = "type")]
    pub r#type: String,
}

impl PostLinodeInstanceRequest {
    pub fn new(region: String, r#type: String) -> PostLinodeInstanceRequest {
        PostLinodeInstanceRequest {
            authorized_keys: None,
            authorized_users: None,
            booted: None,
            disk_encryption: None,
            image: None,
            metadata: None,
            root_pass: None,
            stackscript_data: None,
            stackscript_id: None,
            backup_id: None,
            backups_enabled: None,
            firewall_id: None,
            group: None,
            interfaces: None,
            label: None,
            placement_group: None,
            private_ip: None,
            region,
            swap_size: None,
            tags: None,
            r#type,
        }
    }
}
/// __Limited availability__ Local disk encryption ensures that your data stored on Linodes is secured. Disk encryption protects against unauthorized data access by keeping the data encrypted if the disk is ever removed from the data center, decommissioned, or disposed of. The platform manages the encryption and decryption for you.  By default, encryption is `enabled` on all Linodes. If you opted out of encryption or if the Linode was created prior to local disk encryption support, you can encrypt your data using [Rebuild](https://techdocs.akamai.com/linode-api/reference/post-rebuild-linode-instance).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DiskEncryptionEnum {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for DiskEncryptionEnum {
    fn default() -> DiskEncryptionEnum {
        Self::Enabled
    }
}

