/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetObjectStorageBuckets200ResponseDataInner : An Object Storage bucket. You should access this through the [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/#api).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetObjectStorageBuckets200ResponseDataInner {
    /// __Deprecated__ The legacy `clusterId` equivalent for the `regionId` where this bucket lives. The API maintains this for backward compatibility.  > ðŸ“˜ > > - This value and the `regionId` are interchangeable when used in requests. Best practice is to use the `regionId`. > > - This value is empty for newer regions that don't have a legacy `clusterId`.
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// When this bucket was created.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// The type of `s3_endpoint` available to the active `user` in this `region`. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.
    #[serde(rename = "endpoint_type", skip_serializing_if = "Option::is_none")]
    pub endpoint_type: Option<EndpointTypeEnum>,
    /// The hostname where this bucket can be accessed. This hostname can be accessed through a browser if the bucket is made public.
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// The name of this bucket.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// The number of objects stored in this bucket.
    #[serde(rename = "objects", skip_serializing_if = "Option::is_none")]
    pub objects: Option<i32>,
    /// The `id` of the [region](https://techdocs.akamai.com/linode-api/reference/get-regions) where this Object Storage bucket lives.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The active user's s3 endpoint URL, based on the `endpoint_type` and `region`.
    #[serde(rename = "s3_endpoint", skip_serializing_if = "Option::is_none")]
    pub s3_endpoint: Option<String>,
    /// The size of the bucket in bytes.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
}

impl GetObjectStorageBuckets200ResponseDataInner {
    /// An Object Storage bucket. You should access this through the [S3 API](https://docs.ceph.com/en/latest/radosgw/s3/#api).
    pub fn new() -> GetObjectStorageBuckets200ResponseDataInner {
        GetObjectStorageBuckets200ResponseDataInner {
            cluster: None,
            created: None,
            endpoint_type: None,
            hostname: None,
            label: None,
            objects: None,
            region: None,
            s3_endpoint: None,
            size: None,
        }
    }
}
/// The type of `s3_endpoint` available to the active `user` in this `region`. See [Endpoint types](https://techdocs.akamai.com/cloud-computing/docs/object-storage#endpoint-type) for more information.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EndpointTypeEnum {
    #[serde(rename = "E0")]
    E0,
    #[serde(rename = "E1")]
    E1,
    #[serde(rename = "E2")]
    E2,
    #[serde(rename = "E3")]
    E3,
}

impl Default for EndpointTypeEnum {
    fn default() -> EndpointTypeEnum {
        Self::E0
    }
}

