/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetLkeClusterPools200ResponseDataInner : The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetLkeClusterPools200ResponseDataInner {
    #[serde(rename = "autoscaler", skip_serializing_if = "Option::is_none")]
    pub autoscaler: Option<models::GetLkeClusterPools200ResponseDataInnerAutoscaler>,
    /// The number of nodes in the Node Pool.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// __Limited availability__ For new LKE node pools, `disk_encryption` is automatically `enabled` where disk encryption is supported. It can't be `disabled`. For existing LKE node pools, this derives from the Linode's `disk_encryption` setting. If a Linode's node pool is not encrypted and you want an encrypted node pool, delete the node pool and create a new node pool.
    #[serde(rename = "disk_encryption", skip_serializing_if = "Option::is_none")]
    pub disk_encryption: Option<DiskEncryptionEnum>,
    /// This Node Pool's custom disk layout.
    #[serde(rename = "disks", skip_serializing_if = "Option::is_none")]
    pub disks: Option<Vec<models::PostLkeClusterRequestNodePoolsInnerDisksInner>>,
    /// __Filterable__ This Node Pool's unique ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and easily select subsets of objects. To learn more, review [Add Labels and Taints to your LKE node pools](https://www.linode.com/docs/products/compute/kubernetes/guides/deploy-and-manage-cluster-with-the-linode-api/#add-labels-and-taints-to-your-lke-node-pools).
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    /// Status information for the Nodes which are members of this Node Pool. If a Linode has not been provisioned for a given Node slot, the `instance_id` will be returned as `null`.
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<models::GetLkeClusterNode200Response>>,
    /// __Filterable__ An array of tags applied to this object. Tags are for organizational purposes only.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Kubernetes taints added to nodes in the node pool. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.
    #[serde(rename = "taints", skip_serializing_if = "Option::is_none")]
    pub taints: Option<Vec<models::GetLkeClusterPools200ResponseDataInnerTaintsInner>>,
    /// The Linode Type for all of the nodes in the Node Pool.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
}

impl GetLkeClusterPools200ResponseDataInner {
    /// The set of Node Pools which are members of the Kubernetes cluster. Node Pools consist of a Linode type, the number of Linodes to deploy of that type, and additional status information.
    pub fn new() -> GetLkeClusterPools200ResponseDataInner {
        GetLkeClusterPools200ResponseDataInner {
            autoscaler: None,
            count: None,
            disk_encryption: None,
            disks: None,
            id: None,
            labels: None,
            nodes: None,
            tags: None,
            taints: None,
            r#type: None,
        }
    }
}
/// __Limited availability__ For new LKE node pools, `disk_encryption` is automatically `enabled` where disk encryption is supported. It can't be `disabled`. For existing LKE node pools, this derives from the Linode's `disk_encryption` setting. If a Linode's node pool is not encrypted and you want an encrypted node pool, delete the node pool and create a new node pool.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DiskEncryptionEnum {
    #[serde(rename = "enabled")]
    Enabled,
}

impl Default for DiskEncryptionEnum {
    fn default() -> DiskEncryptionEnum {
        Self::Enabled
    }
}

