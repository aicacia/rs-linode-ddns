/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetNotifications200ResponseDataInner : An important, often time-sensitive item related to your account.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetNotifications200ResponseDataInner {
    /// __Read-only__ A full description of this notification, in markdown format. Not all notifications include a `body`.
    #[serde(rename = "body", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub body: Option<Option<String>>,
    #[serde(rename = "entity", skip_serializing_if = "Option::is_none")]
    pub entity: Option<models::GetNotifications200ResponseDataInnerEntity>,
    /// __Read-only__ A short description of this notification.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// __Read-only__ A human-readable description of the notification.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// __Read-only__ The severity of this notification. This field determines how prominently the notification is displayed and the color of the display text.
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<SeverityEnum>,
    /// __Read-only__ The type of notification.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<TypeEnum>,
    /// __Read-only__ If this notification has a duration, this is when the event or action will complete. For example, if there's scheduled maintenance for one of our systems, `until` represents the end of the maintenance window.
    #[serde(rename = "until", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub until: Option<Option<String>>,
    /// __Read-only__ If this notification is for an event in the future, this specifies when the action occurs. For example, if a compute instance needs to migrate in response to a security advisory, this field sets the approximate time the compute instance will be taken offline for migration.
    #[serde(rename = "when", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub when: Option<Option<String>>,
}

impl GetNotifications200ResponseDataInner {
    /// An important, often time-sensitive item related to your account.
    pub fn new() -> GetNotifications200ResponseDataInner {
        GetNotifications200ResponseDataInner {
            body: None,
            entity: None,
            label: None,
            message: None,
            severity: None,
            r#type: None,
            until: None,
            when: None,
        }
    }
}
/// __Read-only__ The severity of this notification. This field determines how prominently the notification is displayed and the color of the display text.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SeverityEnum {
    #[serde(rename = "minor")]
    Minor,
    #[serde(rename = "major")]
    Major,
    #[serde(rename = "critical")]
    Critical,
}

impl Default for SeverityEnum {
    fn default() -> SeverityEnum {
        Self::Minor
    }
}
/// __Read-only__ The type of notification.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEnum {
    #[serde(rename = "migration_scheduled")]
    MigrationScheduled,
    #[serde(rename = "migration_imminent")]
    MigrationImminent,
    #[serde(rename = "migration_pending")]
    MigrationPending,
    #[serde(rename = "reboot_scheduled")]
    RebootScheduled,
    #[serde(rename = "outage")]
    Outage,
    #[serde(rename = "payment_due")]
    PaymentDue,
    #[serde(rename = "ticket_important")]
    TicketImportant,
    #[serde(rename = "ticket_abuse")]
    TicketAbuse,
    #[serde(rename = "notice")]
    Notice,
    #[serde(rename = "maintenance")]
    Maintenance,
    #[serde(rename = "promotion")]
    Promotion,
}

impl Default for TypeEnum {
    fn default() -> TypeEnum {
        Self::MigrationScheduled
    }
}

