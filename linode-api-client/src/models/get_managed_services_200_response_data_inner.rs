/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetManagedServices200ResponseDataInner : A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetManagedServices200ResponseDataInner {
    /// The URL at which this Service is monitored. URL parameters such as `?no-cache=1` are preserved. URL fragments/anchors such as `#monitor` are __not__ preserved.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// What to expect to find in the response body for the Service to be considered up.
    #[serde(rename = "body", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub body: Option<Option<String>>,
    /// The group of ManagedContacts who should be notified or consulted with when an Issue is detected.
    #[serde(rename = "consultation_group", skip_serializing_if = "Option::is_none")]
    pub consultation_group: Option<String>,
    /// __Read-only__ When this Managed Service was created.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// An array of ManagedCredential IDs that should be used when attempting to resolve issues with this Service.
    #[serde(rename = "credentials", skip_serializing_if = "Option::is_none")]
    pub credentials: Option<Vec<i32>>,
    /// __Read-only__ This Service's unique ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The label for this Service. This is for display purposes only.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Any information relevant to the Service that Linode special forces should know when attempting to resolve Issues.
    #[serde(rename = "notes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub notes: Option<Option<String>>,
    /// The Region in which this Service is located. This is required if address is a private IP, and may not be set otherwise.
    #[serde(rename = "region", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub region: Option<Option<String>>,
    /// How this Service is monitored.
    #[serde(rename = "service_type", skip_serializing_if = "Option::is_none")]
    pub service_type: Option<ServiceTypeEnum>,
    /// __Read-only__ The current status of this Service.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<StatusEnum>,
    /// How long to wait, in seconds, for a response before considering the Service to be down.
    #[serde(rename = "timeout", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<i32>,
    /// __Read-only__ When this Managed Service was last updated.
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
}

impl GetManagedServices200ResponseDataInner {
    /// A service that Linode is monitoring as part of your Managed services. If issues are detected with this service, a ManagedIssue will be opened and, optionally, Linode special forces will attempt to resolve the Issue.
    pub fn new() -> GetManagedServices200ResponseDataInner {
        GetManagedServices200ResponseDataInner {
            address: None,
            body: None,
            consultation_group: None,
            created: None,
            credentials: None,
            id: None,
            label: None,
            notes: None,
            region: None,
            service_type: None,
            status: None,
            timeout: None,
            updated: None,
        }
    }
}
/// How this Service is monitored.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceTypeEnum {
    #[serde(rename = "url")]
    Url,
    #[serde(rename = "tcp")]
    Tcp,
}

impl Default for ServiceTypeEnum {
    fn default() -> ServiceTypeEnum {
        Self::Url
    }
}
/// __Read-only__ The current status of this Service.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusEnum {
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "ok")]
    Ok,
    #[serde(rename = "problem")]
    Problem,
}

impl Default for StatusEnum {
    fn default() -> StatusEnum {
        Self::Disabled
    }
}

