/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Event : A collection of Event objects. An Event is an action taken against an entity related to your Account. For example, booting a Linode would create an Event. The Events returned depends on your grants.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Event {
    /// __Filterable__, __Read-only__ The action that caused this Event. New actions may be added in the future.
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<ActionEnum>,
    /// __Filterable__, __Read-only__ When this Event was created.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// __Read-only__ The total duration in seconds that it takes for the Event to complete.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<f64>,
    #[serde(rename = "entity", skip_serializing_if = "Option::is_none")]
    pub entity: Option<models::GetEvents200ResponseDataInnerEntity>,
    /// __Filterable__, __Read-only__ The unique ID of this Event.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Provides additional information about the event. Additional information may include, but is not limited to, a more detailed representation of events which can help diagnose non-obvious failures.
    #[serde(rename = "message", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub message: Option<Option<String>>,
    /// __Read-only__ A percentage estimating the amount of time remaining for an Event. Returns `null` for notification events.
    #[serde(rename = "percent_complete", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub percent_complete: Option<Option<i32>>,
    /// __Read-only__ The rate of completion of the Event. Only some Events will return rate; for example, migration and resize Events.
    #[serde(rename = "rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rate: Option<Option<String>>,
    /// __Filterable__, __Read-only__ If this Event has been read.
    #[serde(rename = "read", skip_serializing_if = "Option::is_none")]
    pub read: Option<bool>,
    #[serde(rename = "secondary_entity", skip_serializing_if = "Option::is_none")]
    pub secondary_entity: Option<models::GetEvents200ResponseDataInnerSecondaryEntity>,
    /// __Read-only__ If this Event has been seen.
    #[serde(rename = "seen", skip_serializing_if = "Option::is_none")]
    pub seen: Option<bool>,
    /// __Read-only__ The current status of this Event.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<StatusEnum>,
    /// __Read-only__ The estimated time remaining until the completion of this Event. This value is only returned for some in-progress migration events. For all other in-progress events, the `percent_complete` attribute will indicate about how much more work is to be done.
    #[serde(rename = "time_remaining", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub time_remaining: Option<Option<String>>,
    /// __Read-only__ The username of the User who caused the Event.
    #[serde(rename = "username", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub username: Option<Option<String>>,
}

impl Event {
    /// A collection of Event objects. An Event is an action taken against an entity related to your Account. For example, booting a Linode would create an Event. The Events returned depends on your grants.
    pub fn new() -> Event {
        Event {
            action: None,
            created: None,
            duration: None,
            entity: None,
            id: None,
            message: None,
            percent_complete: None,
            rate: None,
            read: None,
            secondary_entity: None,
            seen: None,
            status: None,
            time_remaining: None,
            username: None,
        }
    }
}
/// __Filterable__, __Read-only__ The action that caused this Event. New actions may be added in the future.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ActionEnum {
    #[serde(rename = "account_update")]
    AccountUpdate,
    #[serde(rename = "account_settings_update")]
    AccountSettingsUpdate,
    #[serde(rename = "backups_enable")]
    BackupsEnable,
    #[serde(rename = "backups_cancel")]
    BackupsCancel,
    #[serde(rename = "backups_restore")]
    BackupsRestore,
    #[serde(rename = "community_question_reply")]
    CommunityQuestionReply,
    #[serde(rename = "community_like")]
    CommunityLike,
    #[serde(rename = "credit_card_updated")]
    CreditCardUpdated,
    #[serde(rename = "disk_create")]
    DiskCreate,
    #[serde(rename = "disk_delete")]
    DiskDelete,
    #[serde(rename = "disk_update")]
    DiskUpdate,
    #[serde(rename = "disk_duplicate")]
    DiskDuplicate,
    #[serde(rename = "disk_imagize")]
    DiskImagize,
    #[serde(rename = "disk_resize")]
    DiskResize,
    #[serde(rename = "dns_record_create")]
    DnsRecordCreate,
    #[serde(rename = "dns_record_delete")]
    DnsRecordDelete,
    #[serde(rename = "dns_record_update")]
    DnsRecordUpdate,
    #[serde(rename = "dns_zone_create")]
    DnsZoneCreate,
    #[serde(rename = "dns_zone_delete")]
    DnsZoneDelete,
    #[serde(rename = "dns_zone_import")]
    DnsZoneImport,
    #[serde(rename = "dns_zone_update")]
    DnsZoneUpdate,
    #[serde(rename = "entity_transfer_accept")]
    EntityTransferAccept,
    #[serde(rename = "entity_transfer_cancel")]
    EntityTransferCancel,
    #[serde(rename = "entity_transfer_create")]
    EntityTransferCreate,
    #[serde(rename = "entity_transfer_fail")]
    EntityTransferFail,
    #[serde(rename = "entity_transfer_stale")]
    EntityTransferStale,
    #[serde(rename = "firewall_apply")]
    FirewallApply,
    #[serde(rename = "firewall_create")]
    FirewallCreate,
    #[serde(rename = "firewall_delete")]
    FirewallDelete,
    #[serde(rename = "firewall_disable")]
    FirewallDisable,
    #[serde(rename = "firewall_enable")]
    FirewallEnable,
    #[serde(rename = "firewall_update")]
    FirewallUpdate,
    #[serde(rename = "firewall_device_add")]
    FirewallDeviceAdd,
    #[serde(rename = "firewall_device_remove")]
    FirewallDeviceRemove,
    #[serde(rename = "host_reboot")]
    HostReboot,
    #[serde(rename = "image_delete")]
    ImageDelete,
    #[serde(rename = "image_update")]
    ImageUpdate,
    #[serde(rename = "image_upload")]
    ImageUpload,
    #[serde(rename = "ipaddress_update")]
    IpaddressUpdate,
    #[serde(rename = "lassie_reboot")]
    LassieReboot,
    #[serde(rename = "lish_boot")]
    LishBoot,
    #[serde(rename = "linode_addip")]
    LinodeAddip,
    #[serde(rename = "linode_boot")]
    LinodeBoot,
    #[serde(rename = "linode_clone")]
    LinodeClone,
    #[serde(rename = "linode_create")]
    LinodeCreate,
    #[serde(rename = "linode_delete")]
    LinodeDelete,
    #[serde(rename = "linode_update")]
    LinodeUpdate,
    #[serde(rename = "linode_deleteip")]
    LinodeDeleteip,
    #[serde(rename = "linode_migrate")]
    LinodeMigrate,
    #[serde(rename = "linode_migrate_datacenter")]
    LinodeMigrateDatacenter,
    #[serde(rename = "linode_migrate_datacenter_create")]
    LinodeMigrateDatacenterCreate,
    #[serde(rename = "linode_mutate")]
    LinodeMutate,
    #[serde(rename = "linode_mutate_create")]
    LinodeMutateCreate,
    #[serde(rename = "linode_reboot")]
    LinodeReboot,
    #[serde(rename = "linode_rebuild")]
    LinodeRebuild,
    #[serde(rename = "linode_resize")]
    LinodeResize,
    #[serde(rename = "linode_resize_create")]
    LinodeResizeCreate,
    #[serde(rename = "linode_shutdown")]
    LinodeShutdown,
    #[serde(rename = "linode_snapshot")]
    LinodeSnapshot,
    #[serde(rename = "linode_config_create")]
    LinodeConfigCreate,
    #[serde(rename = "linode_config_delete")]
    LinodeConfigDelete,
    #[serde(rename = "linode_config_update")]
    LinodeConfigUpdate,
    #[serde(rename = "lke_cluster_create")]
    LkeClusterCreate,
    #[serde(rename = "lke_cluster_update")]
    LkeClusterUpdate,
    #[serde(rename = "lke_cluster_delete")]
    LkeClusterDelete,
    #[serde(rename = "lke_cluster_recycle")]
    LkeClusterRecycle,
    #[serde(rename = "lke_cluster_regenerate")]
    LkeClusterRegenerate,
    #[serde(rename = "lke_node_create")]
    LkeNodeCreate,
    #[serde(rename = "lke_node_delete")]
    LkeNodeDelete,
    #[serde(rename = "lke_node_recycle")]
    LkeNodeRecycle,
    #[serde(rename = "lke_pool_create")]
    LkePoolCreate,
    #[serde(rename = "lke_pool_delete")]
    LkePoolDelete,
    #[serde(rename = "lke_pool_recycle")]
    LkePoolRecycle,
    #[serde(rename = "lke_kubeconfig_regenerate")]
    LkeKubeconfigRegenerate,
    #[serde(rename = "lke_token_rotate")]
    LkeTokenRotate,
    #[serde(rename = "longviewclient_create")]
    LongviewclientCreate,
    #[serde(rename = "longviewclient_delete")]
    LongviewclientDelete,
    #[serde(rename = "longviewclient_update")]
    LongviewclientUpdate,
    #[serde(rename = "managed_disabled")]
    ManagedDisabled,
    #[serde(rename = "managed_enabled")]
    ManagedEnabled,
    #[serde(rename = "managed_service_create")]
    ManagedServiceCreate,
    #[serde(rename = "managed_service_delete")]
    ManagedServiceDelete,
    #[serde(rename = "nodebalancer_create")]
    NodebalancerCreate,
    #[serde(rename = "nodebalancer_delete")]
    NodebalancerDelete,
    #[serde(rename = "nodebalancer_update")]
    NodebalancerUpdate,
    #[serde(rename = "nodebalancer_config_create")]
    NodebalancerConfigCreate,
    #[serde(rename = "nodebalancer_config_delete")]
    NodebalancerConfigDelete,
    #[serde(rename = "nodebalancer_config_update")]
    NodebalancerConfigUpdate,
    #[serde(rename = "nodebalancer_node_create")]
    NodebalancerNodeCreate,
    #[serde(rename = "nodebalancer_node_delete")]
    NodebalancerNodeDelete,
    #[serde(rename = "nodebalancer_node_update")]
    NodebalancerNodeUpdate,
    #[serde(rename = "oauth_client_create")]
    OauthClientCreate,
    #[serde(rename = "oauth_client_delete")]
    OauthClientDelete,
    #[serde(rename = "oauth_client_secret_reset")]
    OauthClientSecretReset,
    #[serde(rename = "oauth_client_update")]
    OauthClientUpdate,
    #[serde(rename = "obj_access_key_create")]
    ObjAccessKeyCreate,
    #[serde(rename = "obj_access_key_delete")]
    ObjAccessKeyDelete,
    #[serde(rename = "obj_access_key_update")]
    ObjAccessKeyUpdate,
    #[serde(rename = "password_reset")]
    PasswordReset,
    #[serde(rename = "payment_method_add")]
    PaymentMethodAdd,
    #[serde(rename = "payment_submitted")]
    PaymentSubmitted,
    #[serde(rename = "placement_group_assign")]
    PlacementGroupAssign,
    #[serde(rename = "placement_group_became_compliant")]
    PlacementGroupBecameCompliant,
    #[serde(rename = "placement_group_became_non_compliant")]
    PlacementGroupBecameNonCompliant,
    #[serde(rename = "placement_group_create")]
    PlacementGroupCreate,
    #[serde(rename = "placement_group_delete")]
    PlacementGroupDelete,
    #[serde(rename = "placement_group_unassign")]
    PlacementGroupUnassign,
    #[serde(rename = "placement_group_update")]
    PlacementGroupUpdate,
    #[serde(rename = "profile_update")]
    ProfileUpdate,
    #[serde(rename = "stackscript_create")]
    StackscriptCreate,
    #[serde(rename = "stackscript_delete")]
    StackscriptDelete,
    #[serde(rename = "stackscript_update")]
    StackscriptUpdate,
    #[serde(rename = "stackscript_publicize")]
    StackscriptPublicize,
    #[serde(rename = "stackscript_revise")]
    StackscriptRevise,
    #[serde(rename = "subnet_create")]
    SubnetCreate,
    #[serde(rename = "subnet_delete")]
    SubnetDelete,
    #[serde(rename = "subnet_update")]
    SubnetUpdate,
    #[serde(rename = "tag_create")]
    TagCreate,
    #[serde(rename = "tag_delete")]
    TagDelete,
    #[serde(rename = "tax_id_valid")]
    TaxIdValid,
    #[serde(rename = "tax_id_invalid")]
    TaxIdInvalid,
    #[serde(rename = "tfa_disabled")]
    TfaDisabled,
    #[serde(rename = "tfa_enabled")]
    TfaEnabled,
    #[serde(rename = "ticket_attachment_upload")]
    TicketAttachmentUpload,
    #[serde(rename = "ticket_create")]
    TicketCreate,
    #[serde(rename = "ticket_update")]
    TicketUpdate,
    #[serde(rename = "token_create")]
    TokenCreate,
    #[serde(rename = "token_delete")]
    TokenDelete,
    #[serde(rename = "token_update")]
    TokenUpdate,
    #[serde(rename = "user_create")]
    UserCreate,
    #[serde(rename = "user_update")]
    UserUpdate,
    #[serde(rename = "user_delete")]
    UserDelete,
    #[serde(rename = "user_ssh_key_add")]
    UserSshKeyAdd,
    #[serde(rename = "user_ssh_key_delete")]
    UserSshKeyDelete,
    #[serde(rename = "user_ssh_key_update")]
    UserSshKeyUpdate,
    #[serde(rename = "vlan_attach")]
    VlanAttach,
    #[serde(rename = "vlan_detach")]
    VlanDetach,
    #[serde(rename = "volume_attach")]
    VolumeAttach,
    #[serde(rename = "volume_clone")]
    VolumeClone,
    #[serde(rename = "volume_create")]
    VolumeCreate,
    #[serde(rename = "volume_delete")]
    VolumeDelete,
    #[serde(rename = "volume_update")]
    VolumeUpdate,
    #[serde(rename = "volume_detach")]
    VolumeDetach,
    #[serde(rename = "volume_resize")]
    VolumeResize,
    #[serde(rename = "vpc_create")]
    VpcCreate,
    #[serde(rename = "vpc_delete")]
    VpcDelete,
    #[serde(rename = "vpc_update")]
    VpcUpdate,
}

impl Default for ActionEnum {
    fn default() -> ActionEnum {
        Self::AccountUpdate
    }
}
/// __Read-only__ The current status of this Event.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusEnum {
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "finished")]
    Finished,
    #[serde(rename = "notification")]
    Notification,
    #[serde(rename = "scheduled")]
    Scheduled,
    #[serde(rename = "started")]
    Started,
}

impl Default for StatusEnum {
    fn default() -> StatusEnum {
        Self::Failed
    }
}

