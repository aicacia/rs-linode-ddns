/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetObjectStorageKeys200ResponseDataInnerBucketAccessInner {
    /// The name of the bucket the key can access in the `region`.
    #[serde(rename = "bucket_name", skip_serializing_if = "Option::is_none")]
    pub bucket_name: Option<String>,
    /// Identifies the legacy cluster where this key can be used. The key grants access to each specified `bucket_name`, based on the `permissions` set. To support backward compatibility, the API generates this value, based on the `region` set for a new key. See [Create an Object Storage key](https://techdocs.akamai.com/linode-api/reference/post-object-storage-keys) for more information.
    #[serde(rename = "cluster", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// The level of access the key grants to the `bucket_name`. Keys with `read_write` access can manage content in the `bucket_name`, while `read_only` can be used to view content. See [Create an Object Storage key(ref:post-object-storage-keys) for more details.
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<PermissionsEnum>,
    /// The region where the Object Store `bucket_name` resides.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

impl GetObjectStorageKeys200ResponseDataInnerBucketAccessInner {
    pub fn new() -> GetObjectStorageKeys200ResponseDataInnerBucketAccessInner {
        GetObjectStorageKeys200ResponseDataInnerBucketAccessInner {
            bucket_name: None,
            cluster: None,
            permissions: None,
            region: None,
        }
    }
}
/// The level of access the key grants to the `bucket_name`. Keys with `read_write` access can manage content in the `bucket_name`, while `read_only` can be used to view content. See [Create an Object Storage key(ref:post-object-storage-keys) for more details.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PermissionsEnum {
    #[serde(rename = "read_write")]
    ReadWrite,
    #[serde(rename = "read_only")]
    ReadOnly,
}

impl Default for PermissionsEnum {
    fn default() -> PermissionsEnum {
        Self::ReadWrite
    }
}

