/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetTickets200ResponseDataInner : A support ticket opened from your account.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetTickets200ResponseDataInner {
    /// __Read-only__ A list of filenames representing attached files associated with this ticket.
    #[serde(rename = "attachments", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Vec<String>>,
    /// Whether the ticket can be closed.
    #[serde(rename = "closable", skip_serializing_if = "Option::is_none")]
    pub closable: Option<bool>,
    /// __Filterable__, __Read-only__ When this ticket was closed.
    #[serde(rename = "closed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub closed: Option<Option<String>>,
    /// __Read-only__ The full details of the issue or question.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "entity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub entity: Option<Option<models::GetTickets200ResponseDataInnerEntity>>,
    /// __Read-only__ The Gravatar ID of the user who opened this ticket.
    #[serde(rename = "gravatar_id", skip_serializing_if = "Option::is_none")]
    pub gravatar_id: Option<String>,
    /// __Read-only__ The ID of the support ticket.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// __Filterable__, __Read-only__ When this ticket was created.
    #[serde(rename = "opened", skip_serializing_if = "Option::is_none")]
    pub opened: Option<String>,
    /// __Read-only__ The user who opened this ticket.
    #[serde(rename = "opened_by", skip_serializing_if = "Option::is_none")]
    pub opened_by: Option<String>,
    /// __Read-only__ The current status of this ticket.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<StatusEnum>,
    /// __Read-only__ The summary or title for this ticket.
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    /// __Filterable__, __Read-only__ When this ticket was last updated.
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
    /// __Read-only__ The user who last updated this ticket.
    #[serde(rename = "updated_by", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<Option<String>>,
}

impl GetTickets200ResponseDataInner {
    /// A support ticket opened from your account.
    pub fn new() -> GetTickets200ResponseDataInner {
        GetTickets200ResponseDataInner {
            attachments: None,
            closable: None,
            closed: None,
            description: None,
            entity: None,
            gravatar_id: None,
            id: None,
            opened: None,
            opened_by: None,
            status: None,
            summary: None,
            updated: None,
            updated_by: None,
        }
    }
}
/// __Read-only__ The current status of this ticket.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusEnum {
    #[serde(rename = "closed")]
    Closed,
    #[serde(rename = "new")]
    New,
    #[serde(rename = "open")]
    Open,
}

impl Default for StatusEnum {
    fn default() -> StatusEnum {
        Self::Closed
    }
}

