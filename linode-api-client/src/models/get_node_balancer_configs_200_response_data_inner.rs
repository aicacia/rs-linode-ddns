/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetNodeBalancerConfigs200ResponseDataInner : NodeBalancer `config` options for each protocol.
/// NodeBalancer `config` options for each protocol.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetNodeBalancerConfigs200ResponseDataInner {
    Tcp(models::Tcp),
    Http(models::Http),
    Https(models::Https),
}

impl Default for GetNodeBalancerConfigs200ResponseDataInner {
    fn default() -> Self {
        Self::Tcp(Default::default())
    }
}
/// The algorithm this HTTPS NodeBalancer uses for routing traffic to backends.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AlgorithmEnum {
    #[serde(rename = "roundrobin")]
    Roundrobin,
    #[serde(rename = "leastconn")]
    Leastconn,
    #[serde(rename = "source")]
    Source,
}

impl Default for AlgorithmEnum {
    fn default() -> AlgorithmEnum {
        Self::Roundrobin
    }
}
/// The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down.  - If `none` no check is performed. - `connection` requires only a connection to the backend to succeed. - `http` and `http_body` rely on the backend serving HTTP, and that the response returned matches what is expected.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CheckEnum {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "connection")]
    Connection,
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "http_body")]
    HttpBody,
}

impl Default for CheckEnum {
    fn default() -> CheckEnum {
        Self::None
    }
}
/// What ciphers to use for SSL connections served by this NodeBalancer.  - `legacy` is considered insecure and should only be used if necessary.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CipherSuiteEnum {
    #[serde(rename = "recommended")]
    Recommended,
    #[serde(rename = "legacy")]
    Legacy,
}

impl Default for CipherSuiteEnum {
    fn default() -> CipherSuiteEnum {
        Self::Recommended
    }
}
/// The protocol the port is configured to serve, `https` in this case.  - The `https` protocol is mutually required with `ssl_cert` and `ssl_key`.  Review our guide on [Available protocols](https://techdocs.akamai.com/cloud-computing/docs/available-protocols) for information on protocol features.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProtocolEnum {
    #[serde(rename = "https")]
    Https,
}

impl Default for ProtocolEnum {
    fn default() -> ProtocolEnum {
        Self::Https
    }
}
/// Controls how session stickiness is handled on this port.  - If set to `none`, connections will always be assigned a backend based on the algorithm configured. - If set to `table`, sessions from the same remote address will be routed to the same backend. - For HTTP or HTTPS clients, `http_cookie` allows sessions to be routed to the same backend based on a cookie set by the NodeBalancer.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StickinessEnum {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "table")]
    Table,
    #[serde(rename = "http_cookie")]
    HttpCookie,
}

impl Default for StickinessEnum {
    fn default() -> StickinessEnum {
        Self::None
    }
}

