/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetLinodeIps200ResponseIpv4ReservedInner : An IP address that exists in Linode's system, either IPv4 or IPv6.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetLinodeIps200ResponseIpv4ReservedInner {
    /// __Read-only__ The IP address.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// __Read-only__ The default gateway for this address.
    #[serde(rename = "gateway", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gateway: Option<Option<String>>,
    /// __Read-only__ The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [Assign IPv4s to Linodes](https://techdocs.akamai.com/linode-api/reference/post-assign-ipv4s) operation. For SLAAC and link-local addresses, this value may not be changed.
    #[serde(rename = "linode_id", skip_serializing_if = "Option::is_none")]
    pub linode_id: Option<i32>,
    /// __Read-only__ The number of bits set in the subnet mask.
    #[serde(rename = "prefix", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<i32>,
    /// __Read-only__ Whether this is a public or private IP address.
    #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    /// The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
    #[serde(rename = "rdns", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rdns: Option<Option<String>>,
    /// __Read-only__ The Region this IP address resides in.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// __Read-only__ The mask that separates host bits from network bits for this address.
    #[serde(rename = "subnet_mask", skip_serializing_if = "Option::is_none")]
    pub subnet_mask: Option<String>,
    /// __Read-only__ The type of address this is.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<TypeEnum>,
    #[serde(rename = "vpc_nat_1_1", skip_serializing_if = "Option::is_none")]
    pub vpc_nat_1_1: Option<models::GetLinodeIps200ResponseIpv4ReservedInnerVpcNat11>,
}

impl GetLinodeIps200ResponseIpv4ReservedInner {
    /// An IP address that exists in Linode's system, either IPv4 or IPv6.
    pub fn new() -> GetLinodeIps200ResponseIpv4ReservedInner {
        GetLinodeIps200ResponseIpv4ReservedInner {
            address: None,
            gateway: None,
            linode_id: None,
            prefix: None,
            public: None,
            rdns: None,
            region: None,
            subnet_mask: None,
            r#type: None,
            vpc_nat_1_1: None,
        }
    }
}
/// __Read-only__ The type of address this is.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEnum {
    #[serde(rename = "ipv4")]
    Ipv4,
    #[serde(rename = "ipv6")]
    Ipv6,
    #[serde(rename = "ipv6/pool")]
    Ipv6SlashPool,
    #[serde(rename = "ipv6/range")]
    Ipv6SlashRange,
}

impl Default for TypeEnum {
    fn default() -> TypeEnum {
        Self::Ipv4
    }
}

