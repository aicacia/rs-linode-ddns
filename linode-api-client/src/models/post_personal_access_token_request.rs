/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostPersonalAccessTokenRequest {
    /// When this token should be valid until.  If omitted, the new token will be valid until it is manually revoked.
    #[serde(rename = "expiry", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expiry: Option<Option<String>>,
    /// __Filterable__ This token's label.  This is for display purposes only, but can be used to more easily track what you're using each token for.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// The access [scopes](https://techdocs.akamai.com/linode-api/reference/get-started#oauth-reference) to grant to the created token. These cannot be changed after creation, and may not exceed the scopes of the acting token.  If omitted or entered with a wildcard character (`*`), the new token will have the same scopes as the acting token.  Multiple scopes are separated by a space character (` `).  For example, `linodes:read_write account:read_only`.
    #[serde(rename = "scopes", skip_serializing_if = "Option::is_none")]
    pub scopes: Option<String>,
}

impl PostPersonalAccessTokenRequest {
    pub fn new() -> PostPersonalAccessTokenRequest {
        PostPersonalAccessTokenRequest {
            expiry: None,
            label: None,
            scopes: None,
        }
    }
}

