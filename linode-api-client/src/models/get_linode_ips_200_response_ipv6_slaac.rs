/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetLinodeIps200ResponseIpv6Slaac : A SLAAC IPv6 address that exists in Linode's system.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetLinodeIps200ResponseIpv6Slaac {
    /// __Read-only__ The address.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// __Read-only__ The default gateway for this address.
    #[serde(rename = "gateway", skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    /// __Read-only__ The ID of the Linode this address currently belongs to.
    #[serde(rename = "linode_id", skip_serializing_if = "Option::is_none")]
    pub linode_id: Option<i32>,
    /// __Read-only__ The network prefix.
    #[serde(rename = "prefix", skip_serializing_if = "Option::is_none")]
    pub prefix: Option<i32>,
    /// __Read-only__ Whether this is a public or private IP address.
    #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    /// The reverse DNS assigned to this address.
    #[serde(rename = "rdns", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rdns: Option<Option<String>>,
    /// __Filterable__, __Read-only__ The Region this address resides in.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// __Read-only__ The subnet mask.
    #[serde(rename = "subnet_mask", skip_serializing_if = "Option::is_none")]
    pub subnet_mask: Option<String>,
    /// __Read-only__ The type of address this is.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
}

impl GetLinodeIps200ResponseIpv6Slaac {
    /// A SLAAC IPv6 address that exists in Linode's system.
    pub fn new() -> GetLinodeIps200ResponseIpv6Slaac {
        GetLinodeIps200ResponseIpv6Slaac {
            address: None,
            gateway: None,
            linode_id: None,
            prefix: None,
            public: None,
            rdns: None,
            region: None,
            subnet_mask: None,
            r#type: None,
        }
    }
}

