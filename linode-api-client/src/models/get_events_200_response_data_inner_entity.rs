/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetEvents200ResponseDataInnerEntity : __Read-only__ Detailed information about the Event's entity, including ID, type, label, and URL used to access it.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetEvents200ResponseDataInnerEntity {
    /// __Filterable__ The unique ID for an Event's entity.  Some Event entities do not have IDs associated with them, so they will not be returned when filtering by ID. These Events include:    - `account`   - `profile`  Entities for some Events are assigned the ID of the Linode they correspond to. When filtering by ID for these Events, use the corresponding Linode's ID. These Events include:    - `disks`   - `backups`  Tag Events use a tag's name for the entity ID field. When filtering by ID for tag Events, supply the name of the tag.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The current label of this object. The label may reflect changes that occur with this Event.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// __Filterable__, __Read-only__ The type of entity that is being referenced by the Event.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<TypeEnum>,
    /// The URL where you can access the object this Event is for. If a relative URL, it is relative to the domain you retrieved the Event from.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl GetEvents200ResponseDataInnerEntity {
    /// __Read-only__ Detailed information about the Event's entity, including ID, type, label, and URL used to access it.
    pub fn new() -> GetEvents200ResponseDataInnerEntity {
        GetEvents200ResponseDataInnerEntity {
            id: None,
            label: None,
            r#type: None,
            url: None,
        }
    }
}
/// __Filterable__, __Read-only__ The type of entity that is being referenced by the Event.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEnum {
    #[serde(rename = "account")]
    Account,
    #[serde(rename = "backups")]
    Backups,
    #[serde(rename = "community")]
    Community,
    #[serde(rename = "disks")]
    Disks,
    #[serde(rename = "domain")]
    Domain,
    #[serde(rename = "entity_transfer")]
    EntityTransfer,
    #[serde(rename = "firewall")]
    Firewall,
    #[serde(rename = "image")]
    Image,
    #[serde(rename = "ipaddress")]
    Ipaddress,
    #[serde(rename = "linode")]
    Linode,
    #[serde(rename = "longview")]
    Longview,
    #[serde(rename = "loadbalancer")]
    Loadbalancer,
    #[serde(rename = "managed_service")]
    ManagedService,
    #[serde(rename = "nodebalancer")]
    Nodebalancer,
    #[serde(rename = "oauth_client")]
    OauthClient,
    #[serde(rename = "profile")]
    Profile,
    #[serde(rename = "stackscript")]
    Stackscript,
    #[serde(rename = "tag")]
    Tag,
    #[serde(rename = "ticket")]
    Ticket,
    #[serde(rename = "token")]
    Token,
    #[serde(rename = "user")]
    User,
    #[serde(rename = "user_ssh_key")]
    UserSshKey,
    #[serde(rename = "volume")]
    Volume,
}

impl Default for TypeEnum {
    fn default() -> TypeEnum {
        Self::Account
    }
}

