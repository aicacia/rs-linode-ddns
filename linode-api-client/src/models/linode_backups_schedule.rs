/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LinodeBackupsSchedule {
    /// The day of the week that your Linode's weekly backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as `Scheduling` until the `day` is automatically selected.
    #[serde(rename = "day", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub day: Option<Option<DayEnum>>,
    /// When your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur.  For example, `W10` indicates that your backups should be taken between 10:00 and 12:00. If you don't choose a backup window, the API automatically assigns one.  If not set manually, when backups are initially enabled this may come back as `Scheduling` until the `window` is automatically selected.
    #[serde(rename = "window", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub window: Option<Option<WindowEnum>>,
}

impl LinodeBackupsSchedule {
    pub fn new() -> LinodeBackupsSchedule {
        LinodeBackupsSchedule {
            day: None,
            window: None,
        }
    }
}
/// The day of the week that your Linode's weekly backup is taken. If not set manually, a day will be chosen for you. Backups are taken every day, but backups taken on this day are preferred when selecting backups to retain for a longer period.  If not set manually, then when backups are initially enabled, this may come back as `Scheduling` until the `day` is automatically selected.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DayEnum {
    #[serde(rename = "Scheduling")]
    Scheduling,
    #[serde(rename = "Sunday")]
    Sunday,
    #[serde(rename = "Monday")]
    Monday,
    #[serde(rename = "Tuesday")]
    Tuesday,
    #[serde(rename = "Wednesday")]
    Wednesday,
    #[serde(rename = "Thursday")]
    Thursday,
    #[serde(rename = "Friday")]
    Friday,
    #[serde(rename = "Saturday")]
    Saturday,
}

impl Default for DayEnum {
    fn default() -> DayEnum {
        Self::Scheduling
    }
}
/// When your backups will be taken, in UTC. A backups window is a two-hour span of time in which the backup may occur.  For example, `W10` indicates that your backups should be taken between 10:00 and 12:00. If you don't choose a backup window, the API automatically assigns one.  If not set manually, when backups are initially enabled this may come back as `Scheduling` until the `window` is automatically selected.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WindowEnum {
    #[serde(rename = "Scheduling")]
    Scheduling,
    #[serde(rename = "W0")]
    W0,
    #[serde(rename = "W2")]
    W2,
    #[serde(rename = "W4")]
    W4,
    #[serde(rename = "W6")]
    W6,
    #[serde(rename = "W8")]
    W8,
    #[serde(rename = "W10")]
    W10,
    #[serde(rename = "W12")]
    W12,
    #[serde(rename = "W14")]
    W14,
    #[serde(rename = "W16")]
    W16,
    #[serde(rename = "W18")]
    W18,
    #[serde(rename = "W20")]
    W20,
    #[serde(rename = "W22")]
    W22,
}

impl Default for WindowEnum {
    fn default() -> WindowEnum {
        Self::Scheduling
    }
}

