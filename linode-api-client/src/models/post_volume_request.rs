/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostVolumeRequest {
    /// When creating a Volume attached to a Linode, the ID of the Linode Config to include the new Volume in. This Config must belong to the Linode referenced by `linode_id`. Must _not_ be provided if `linode_id` is not sent. If a `linode_id` is sent without a `config_id`, the volume will be attached:    - to the Linode's only config if it only has one config.   - to the Linode's last used config, if possible.  If no config can be selected for attachment, an error will be returned.
    #[serde(rename = "config_id", skip_serializing_if = "Option::is_none")]
    pub config_id: Option<i32>,
    /// __Limited availability__ Enables encryption on the volume. Full disk encryption ensures the data stored on a block storage volume drive is secure. It protects against unauthorized access by keeping the data encrypted if the volume drive is removed from the data center, decommissioned, or disposed of.  The platform automatically manages the encryption and decryption process for you. You can use an encrypted volume the same way as you use a non-encrypted volume.  You can enable or disable disk encryption only when creating new block storage volumes. After a volume is created, the encryption setting can't be changed.
    #[serde(rename = "encryption", skip_serializing_if = "Option::is_none")]
    pub encryption: Option<EncryptionEnum>,
    /// The Volume's label, which is also used in the `filesystem_path` of the resulting volume.
    #[serde(rename = "label")]
    pub label: String,
    /// The Linode this volume should be attached to upon creation. If not given, the volume will be created without an attachment.
    #[serde(rename = "linode_id", skip_serializing_if = "Option::is_none")]
    pub linode_id: Option<i32>,
    /// The Region to deploy this Volume in. This is only required if a linode_id is not given.
    #[serde(rename = "region", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub region: Option<Option<String>>,
    /// The initial size of this volume, in GB.  Be aware that volumes may only be resized up after creation.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// __Filterable__ An array of Tags applied to this object.  Tags are for organizational purposes only.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

impl PostVolumeRequest {
    pub fn new(label: String) -> PostVolumeRequest {
        PostVolumeRequest {
            config_id: None,
            encryption: None,
            label,
            linode_id: None,
            region: None,
            size: None,
            tags: None,
        }
    }
}
/// __Limited availability__ Enables encryption on the volume. Full disk encryption ensures the data stored on a block storage volume drive is secure. It protects against unauthorized access by keeping the data encrypted if the volume drive is removed from the data center, decommissioned, or disposed of.  The platform automatically manages the encryption and decryption process for you. You can use an encrypted volume the same way as you use a non-encrypted volume.  You can enable or disable disk encryption only when creating new block storage volumes. After a volume is created, the encryption setting can't be changed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EncryptionEnum {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for EncryptionEnum {
    fn default() -> EncryptionEnum {
        Self::Enabled
    }
}

