/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostMigrateLinodeInstanceRequest {
    #[serde(rename = "placement_group", skip_serializing_if = "Option::is_none")]
    pub placement_group: Option<models::PostMigrateLinodeInstanceRequestPlacementGroup>,
    /// The region to which the Linode will be migrated. Must be a valid region slug. A list of regions can be viewed by running the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation. A cross data center migration will cancel a pending migration that has not yet been initiated. A cross data center migration will initiate a `linode_migrate_datacenter_create` event.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Type of migration used in moving to a new host or Linode type.  `warm`: the Linode will not power down until the migration is complete. Warm migrations are not available for DC migrations.  `cold`: the Linode will be powered down and migrated. When the migration is complete, the Linode will be powered on.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<TypeEnum>,
    /// When initiating a cross DC migration, setting this value to `true` will also ensure that the Linode is upgraded to the latest generation of hardware that corresponds to your Linode's Type, if any free upgrades are available for it. If no free upgrades are available, and this value is set to `true`, then the endpoint will return a 400 error code and the migration will not be performed. If the data center set in the `region` field does not allow upgrades, then the endpoint will return a 400 error code and the migration will not be performed.
    #[serde(rename = "upgrade", skip_serializing_if = "Option::is_none")]
    pub upgrade: Option<bool>,
}

impl PostMigrateLinodeInstanceRequest {
    pub fn new() -> PostMigrateLinodeInstanceRequest {
        PostMigrateLinodeInstanceRequest {
            placement_group: None,
            region: None,
            r#type: None,
            upgrade: None,
        }
    }
}
/// Type of migration used in moving to a new host or Linode type.  `warm`: the Linode will not power down until the migration is complete. Warm migrations are not available for DC migrations.  `cold`: the Linode will be powered down and migrated. When the migration is complete, the Linode will be powered on.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEnum {
    #[serde(rename = "warm")]
    Warm,
    #[serde(rename = "cold")]
    Cold,
}

impl Default for TypeEnum {
    fn default() -> TypeEnum {
        Self::Warm
    }
}

