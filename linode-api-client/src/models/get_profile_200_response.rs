/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetProfile200Response : A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetProfile200Response {
    /// __Read-only__ This account's Cloud Manager authentication type. Authentication types are chosen through Cloud Manager and authorized when logging into your account. These authentication types are either the user's password (in conjunction with their username), or the name of their identity provider such as GitHub. For example, if a user:  - Has never used Third-Party Authentication, their authentication type will be `password`. - Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`). - Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.  __Note__. This functionality may not yet be available in Cloud Manager. See the [Cloud Manager Changelog](https://www.linode.com/docs/products/tools/cloud-manager/release-notes/) for the latest updates.
    #[serde(rename = "authentication_type", skip_serializing_if = "Option::is_none")]
    pub authentication_type: Option<AuthenticationTypeEnum>,
    /// The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is `disabled`.
    #[serde(rename = "authorized_keys", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub authorized_keys: Option<Option<Vec<String>>>,
    /// Your email address.  This address will be used for communication with Linode as necessary.
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// If `true`, you will receive email notifications about account activity.  If `false`, you may still receive business-critical communications through email.
    #[serde(rename = "email_notifications", skip_serializing_if = "Option::is_none")]
    pub email_notifications: Option<bool>,
    /// If `true`, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled. If you disable this setting, you will not be able to re-enable it.
    #[serde(rename = "ip_whitelist_enabled", skip_serializing_if = "Option::is_none")]
    pub ip_whitelist_enabled: Option<bool>,
    /// The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](https://www.linode.com/docs/guides/lish/).  - `keys_only` is the most secure if you intend to use Lish. - `disabled` is recommended if you do not intend to use Lish at all. - If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [Get a profile](https://techdocs.akamai.com/linode-api/reference/get-profile) operation.
    #[serde(rename = "lish_auth_method", skip_serializing_if = "Option::is_none")]
    pub lish_auth_method: Option<LishAuthMethodEnum>,
    #[serde(rename = "referrals", skip_serializing_if = "Option::is_none")]
    pub referrals: Option<models::GetProfile200ResponseReferrals>,
    /// If `true`, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, run [List grants](https://techdocs.akamai.com/linode-api/reference/get-profile-grants).
    #[serde(rename = "restricted", skip_serializing_if = "Option::is_none")]
    pub restricted: Option<bool>,
    /// The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// If `true`, logins from untrusted computers will require Two Factor Authentication.  Run [Create a two factor secret](https://techdocs.akamai.com/linode-api/reference/post-tfa-enable) to enable Two Factor Authentication.
    #[serde(rename = "two_factor_auth", skip_serializing_if = "Option::is_none")]
    pub two_factor_auth: Option<bool>,
    /// __Read-only__ Your unique ID in our system. This value will never change, and can safely be used to identify your User.
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<i32>,
    /// __Read-only__ Your username, used for logging in to our system.
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// __Read-only__ The phone number verified for this Profile with the [Verify a phone number](https://techdocs.akamai.com/linode-api/reference/post-profile-phone-number-verify) operation.  `null` if this Profile has no verified phone number.
    #[serde(rename = "verified_phone_number", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub verified_phone_number: Option<Option<String>>,
}

impl GetProfile200Response {
    /// A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.
    pub fn new() -> GetProfile200Response {
        GetProfile200Response {
            authentication_type: None,
            authorized_keys: None,
            email: None,
            email_notifications: None,
            ip_whitelist_enabled: None,
            lish_auth_method: None,
            referrals: None,
            restricted: None,
            timezone: None,
            two_factor_auth: None,
            uid: None,
            username: None,
            verified_phone_number: None,
        }
    }
}
/// __Read-only__ This account's Cloud Manager authentication type. Authentication types are chosen through Cloud Manager and authorized when logging into your account. These authentication types are either the user's password (in conjunction with their username), or the name of their identity provider such as GitHub. For example, if a user:  - Has never used Third-Party Authentication, their authentication type will be `password`. - Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`). - Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.  __Note__. This functionality may not yet be available in Cloud Manager. See the [Cloud Manager Changelog](https://www.linode.com/docs/products/tools/cloud-manager/release-notes/) for the latest updates.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthenticationTypeEnum {
    #[serde(rename = "password")]
    Password,
    #[serde(rename = "github")]
    Github,
}

impl Default for AuthenticationTypeEnum {
    fn default() -> AuthenticationTypeEnum {
        Self::Password
    }
}
/// The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](https://www.linode.com/docs/guides/lish/).  - `keys_only` is the most secure if you intend to use Lish. - `disabled` is recommended if you do not intend to use Lish at all. - If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [Get a profile](https://techdocs.akamai.com/linode-api/reference/get-profile) operation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LishAuthMethodEnum {
    #[serde(rename = "password_keys")]
    PasswordKeys,
    #[serde(rename = "keys_only")]
    KeysOnly,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for LishAuthMethodEnum {
    fn default() -> LishAuthMethodEnum {
        Self::PasswordKeys
    }
}

