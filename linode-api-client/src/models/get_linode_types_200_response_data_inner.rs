/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetLinodeTypes200ResponseDataInner : The available Linode types, including pricing and specifications for each. Use them when [creating](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) or [resizing](https://techdocs.akamai.com/linode-api/reference/post-resize-linode-instance) Linodes.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetLinodeTypes200ResponseDataInner {
    #[serde(rename = "addons", skip_serializing_if = "Option::is_none")]
    pub addons: Option<models::GetLinodeTypes200ResponseDataInnerAddons>,
    /// __Filterable__, __Read-only__ The class of the Linode type.  - `nanode`. These instances are good for low-duty workloads, where performance isn't critical.  - `standard`. These instances are good for medium-duty workloads, and offer a good mix of performance, resources, and price.  - `dedicated`. These instances are good for full-duty workloads where consistent performance is important.  - `premium` (limited regions). This includes the features of a `dedicated` instance as well as the latest AMD EPYC&trade; CPUs. This ensures your applications are running on the latest hardware with consistently high performance. Only available in [regions](https://techdocs.akamai.com/linode-api/reference/get-regions) with \"Premium Plans\" in their `capabilities`.  - `gpu` (limited regions). Linodes with dedicated NVIDIA Quadro&reg; RTX 6000 GPUs accelerate highly specialized applications such as machine learning, AI, and video transcoding. Only available in [regions](https://techdocs.akamai.com/linode-api/reference/get-regions) with `GPU Linodes` in their `capabilities`.  - `accelerated` (limited regions - **Beta**). These leverage the power of dedicated, application-specific integrated circuits (ASIC), starting with NETINT Video Processing Units (VPUs). They're ideal for video transcoding, media processing, and other compute-heavy workloads. Designed to offload specialized tasks, these instances deliver faster processing times and greater efficiency than traditional CPU-based solutions.  - `highmem`. High Memory instances favor RAM over other resources, and can be good for memory hungry use cases like caching and in-memory databases. All High Memory plans contain dedicated CPU cores.  > ðŸ“˜ > > - A `nanode` class is listed as a 1 GB Linode in Cloud Manager. The API, the CLI, and billing continue to refer to these as a Nanode. > > - A `standard` class is listed as a Shared Linode in Cloud Manager. The API, the CLI, and billing still refer to these as Standard. > > - The `accelerated` Linode type is in **Beta**. Talk to your account team or [open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket).
    #[serde(rename = "class", skip_serializing_if = "Option::is_none")]
    pub class: Option<ClassEnum>,
    /// __Filterable__, __Read-only__ The Linode type's disk size in MB.
    #[serde(rename = "disk", skip_serializing_if = "Option::is_none")]
    pub disk: Option<i32>,
    /// __Filterable__, __Read-only__ The number of GPUs this Linode type offers.
    #[serde(rename = "gpus", skip_serializing_if = "Option::is_none")]
    pub gpus: Option<i32>,
    /// __Read-only__ The ID representing the Linode type.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// __Filterable__, __Read-only__ The display name for the Linode type.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// __Filterable__, __Read-only__ Amount of RAM included in this Linode type.
    #[serde(rename = "memory", skip_serializing_if = "Option::is_none")]
    pub memory: Option<i32>,
    /// __Filterable__, __Read-only__ The Mbits outbound bandwidth allocation.
    #[serde(rename = "network_out", skip_serializing_if = "Option::is_none")]
    pub network_out: Option<i32>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<models::GetLinodeTypes200ResponseDataInnerPrice>,
    #[serde(rename = "region_prices", skip_serializing_if = "Option::is_none")]
    pub region_prices: Option<Vec<models::GetLinodeTypes200ResponseDataInnerRegionPricesInner>>,
    /// __Read-only__ After a [mutate](https://techdocs.akamai.com/linode-api/reference/post-mutate-linode-instance), the Linode is upgraded to this Linode type. If `null`, this Linode type can't be mutated.
    #[serde(rename = "successor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub successor: Option<Option<String>>,
    /// __Filterable__, __Read-only__ The monthly outbound transfer amount in MB.
    #[serde(rename = "transfer", skip_serializing_if = "Option::is_none")]
    pub transfer: Option<i32>,
    /// __Filterable__, __Read-only__ The number of VCPU cores this Linode type offers.
    #[serde(rename = "vcpus", skip_serializing_if = "Option::is_none")]
    pub vcpus: Option<i32>,
}

impl GetLinodeTypes200ResponseDataInner {
    /// The available Linode types, including pricing and specifications for each. Use them when [creating](https://techdocs.akamai.com/linode-api/reference/post-linode-instance) or [resizing](https://techdocs.akamai.com/linode-api/reference/post-resize-linode-instance) Linodes.
    pub fn new() -> GetLinodeTypes200ResponseDataInner {
        GetLinodeTypes200ResponseDataInner {
            addons: None,
            class: None,
            disk: None,
            gpus: None,
            id: None,
            label: None,
            memory: None,
            network_out: None,
            price: None,
            region_prices: None,
            successor: None,
            transfer: None,
            vcpus: None,
        }
    }
}
/// __Filterable__, __Read-only__ The class of the Linode type.  - `nanode`. These instances are good for low-duty workloads, where performance isn't critical.  - `standard`. These instances are good for medium-duty workloads, and offer a good mix of performance, resources, and price.  - `dedicated`. These instances are good for full-duty workloads where consistent performance is important.  - `premium` (limited regions). This includes the features of a `dedicated` instance as well as the latest AMD EPYC&trade; CPUs. This ensures your applications are running on the latest hardware with consistently high performance. Only available in [regions](https://techdocs.akamai.com/linode-api/reference/get-regions) with \"Premium Plans\" in their `capabilities`.  - `gpu` (limited regions). Linodes with dedicated NVIDIA Quadro&reg; RTX 6000 GPUs accelerate highly specialized applications such as machine learning, AI, and video transcoding. Only available in [regions](https://techdocs.akamai.com/linode-api/reference/get-regions) with `GPU Linodes` in their `capabilities`.  - `accelerated` (limited regions - **Beta**). These leverage the power of dedicated, application-specific integrated circuits (ASIC), starting with NETINT Video Processing Units (VPUs). They're ideal for video transcoding, media processing, and other compute-heavy workloads. Designed to offload specialized tasks, these instances deliver faster processing times and greater efficiency than traditional CPU-based solutions.  - `highmem`. High Memory instances favor RAM over other resources, and can be good for memory hungry use cases like caching and in-memory databases. All High Memory plans contain dedicated CPU cores.  > ðŸ“˜ > > - A `nanode` class is listed as a 1 GB Linode in Cloud Manager. The API, the CLI, and billing continue to refer to these as a Nanode. > > - A `standard` class is listed as a Shared Linode in Cloud Manager. The API, the CLI, and billing still refer to these as Standard. > > - The `accelerated` Linode type is in **Beta**. Talk to your account team or [open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClassEnum {
    #[serde(rename = "nanode")]
    Nanode,
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "dedicated")]
    Dedicated,
    #[serde(rename = "premium")]
    Premium,
    #[serde(rename = "gpu")]
    Gpu,
    #[serde(rename = "accelerated")]
    Accelerated,
    #[serde(rename = "highmem")]
    Highmem,
}

impl Default for ClassEnum {
    fn default() -> ClassEnum {
        Self::Nanode
    }
}

