/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetDatabasesInstances200ResponseAllOfDataInnerUpdates : Configuration settings for automated patch update maintenance for the Managed Database.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetDatabasesInstances200ResponseAllOfDataInnerUpdates {
    /// The numeric reference for the day of the week to perform maintenance. `1` is Monday, `2` is Tuesday, through to `7` which is Sunday.
    #[serde(rename = "day_of_week", skip_serializing_if = "Option::is_none")]
    pub day_of_week: Option<i32>,
    /// The maximum maintenance window time in hours.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// How frequently maintenance occurs. Currently can only be `weekly`.
    #[serde(rename = "frequency", skip_serializing_if = "Option::is_none")]
    pub frequency: Option<FrequencyEnum>,
    /// The hour to begin maintenance based in UTC time.
    #[serde(rename = "hour_of_day", skip_serializing_if = "Option::is_none")]
    pub hour_of_day: Option<i32>,
    /// __Read-only__ An array of pending updates.
    #[serde(rename = "pending", skip_serializing_if = "Option::is_none")]
    pub pending: Option<Vec<models::GetDatabasesInstances200ResponseAllOfDataInnerUpdatesPendingInner>>,
}

impl GetDatabasesInstances200ResponseAllOfDataInnerUpdates {
    /// Configuration settings for automated patch update maintenance for the Managed Database.
    pub fn new() -> GetDatabasesInstances200ResponseAllOfDataInnerUpdates {
        GetDatabasesInstances200ResponseAllOfDataInnerUpdates {
            day_of_week: None,
            duration: None,
            frequency: None,
            hour_of_day: None,
            pending: None,
        }
    }
}
/// How frequently maintenance occurs. Currently can only be `weekly`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FrequencyEnum {
    #[serde(rename = "weekly")]
    Weekly,
}

impl Default for FrequencyEnum {
    fn default() -> FrequencyEnum {
        Self::Weekly
    }
}

