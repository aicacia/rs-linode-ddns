/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NodeBalancer3 : Linode's load balancing solution. Can handle multiple ports, SSL termination, and any number of backends. NodeBalancer ports are configured with NodeBalancer configs, and each config is given one or more NodeBalancer nodes that accepts traffic.  The traffic should be routed to the NodeBalancer's IP address, for the NodeBalancer to handle routing individual requests to backends.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeBalancer3 {
    /// Throttle TCP connections per second for TCP, HTTP, and HTTPS configurations.  Set to `0` (zero) to disable throttling.
    #[serde(rename = "client_conn_throttle", skip_serializing_if = "Option::is_none")]
    pub client_conn_throttle: Option<i32>,
    /// __Read-only__ When this NodeBalancer was created.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// __Read-only__ This NodeBalancer's hostname, beginning with its IP address and ending with _.ip.linodeusercontent.com_.
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// __Read-only__ This NodeBalancer's unique ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// __Filterable__, __Read-only__ This NodeBalancer's public IPv4 address.
    #[serde(rename = "ipv4", skip_serializing_if = "Option::is_none")]
    pub ipv4: Option<String>,
    /// __Read-only__ This NodeBalancer's public IPv6 address.
    #[serde(rename = "ipv6", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ipv6: Option<Option<String>>,
    /// __Filterable__ This NodeBalancer's label. These must be unique on your Account.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// __Filterable__, __Read-only__ The Region where this NodeBalancer is located. NodeBalancers only support backends in the same Region.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// __Filterable__ An array of Tags applied to this object.  Tags are for organizational purposes only.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "transfer", skip_serializing_if = "Option::is_none")]
    pub transfer: Option<models::NodeBalancerTransfer>,
    /// __Read-only__ When this NodeBalancer was last updated.
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
}

impl NodeBalancer3 {
    /// Linode's load balancing solution. Can handle multiple ports, SSL termination, and any number of backends. NodeBalancer ports are configured with NodeBalancer configs, and each config is given one or more NodeBalancer nodes that accepts traffic.  The traffic should be routed to the NodeBalancer's IP address, for the NodeBalancer to handle routing individual requests to backends.
    pub fn new() -> NodeBalancer3 {
        NodeBalancer3 {
            client_conn_throttle: None,
            created: None,
            hostname: None,
            id: None,
            ipv4: None,
            ipv6: None,
            label: None,
            region: None,
            tags: None,
            transfer: None,
            updated: None,
        }
    }
}

