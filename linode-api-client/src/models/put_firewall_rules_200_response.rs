/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PutFirewallRules200Response : The inbound and outbound access rules to apply to the Firewall.  A Firewall may have up to 25 rules across its inbound and outbound rulesets.  Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PutFirewallRules200Response {
    /// __Read-only__ The fingerprint is a 32-bit hash. It represents the firewall rules as an 8 character hex string. You can use `fingerprint` to compare rule versions.
    #[serde(rename = "fingerprint", skip_serializing_if = "Option::is_none")]
    pub fingerprint: Option<String>,
    /// The inbound rules for the firewall, as a JSON array.
    #[serde(rename = "inbound", skip_serializing_if = "Option::is_none")]
    pub inbound: Option<Vec<models::PutFirewallRules200ResponseInboundInner>>,
    /// The default behavior for inbound traffic. This setting can be overridden by [updating](https://techdocs.akamai.com/linode-api/reference/put-firewall-rules) the `inbound.action` property of the Firewall Rule.
    #[serde(rename = "inbound_policy", skip_serializing_if = "Option::is_none")]
    pub inbound_policy: Option<InboundPolicyEnum>,
    /// The outbound rules for the firewall, as a JSON array.
    #[serde(rename = "outbound", skip_serializing_if = "Option::is_none")]
    pub outbound: Option<Vec<models::PutFirewallRules200ResponseOutboundInner>>,
    /// The default behavior for outbound traffic. This setting can be overridden by [updating](https://techdocs.akamai.com/linode-api/reference/put-firewall-rules) the `outbound.action` property of the Firewall Rule.
    #[serde(rename = "outbound_policy", skip_serializing_if = "Option::is_none")]
    pub outbound_policy: Option<OutboundPolicyEnum>,
    /// __Read-only__ The firewall's rule version. The first version is `1`. The version number is incremented when the firewall's rules change.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i32>,
}

impl PutFirewallRules200Response {
    /// The inbound and outbound access rules to apply to the Firewall.  A Firewall may have up to 25 rules across its inbound and outbound rulesets.  Multiple rules are applied in order. If two rules conflict, the first rule takes precedence. For example, if the first rule accepts inbound traffic from an address, and the second rule drops inbound traffic the same address, the first rule applies and inbound traffic from that address is accepted.
    pub fn new() -> PutFirewallRules200Response {
        PutFirewallRules200Response {
            fingerprint: None,
            inbound: None,
            inbound_policy: None,
            outbound: None,
            outbound_policy: None,
            version: None,
        }
    }
}
/// The default behavior for inbound traffic. This setting can be overridden by [updating](https://techdocs.akamai.com/linode-api/reference/put-firewall-rules) the `inbound.action` property of the Firewall Rule.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InboundPolicyEnum {
    #[serde(rename = "ACCEPT")]
    Accept,
    #[serde(rename = "DROP")]
    Drop,
}

impl Default for InboundPolicyEnum {
    fn default() -> InboundPolicyEnum {
        Self::Accept
    }
}
/// The default behavior for outbound traffic. This setting can be overridden by [updating](https://techdocs.akamai.com/linode-api/reference/put-firewall-rules) the `outbound.action` property of the Firewall Rule.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OutboundPolicyEnum {
    #[serde(rename = "ACCEPT")]
    Accept,
    #[serde(rename = "DROP")]
    Drop,
}

impl Default for OutboundPolicyEnum {
    fn default() -> OutboundPolicyEnum {
        Self::Accept
    }
}

