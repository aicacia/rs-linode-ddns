/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetObjectStorageClusters200ResponseDataInner : An Object Storage Cluster.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetObjectStorageClusters200ResponseDataInner {
    /// The base URL for this cluster, used for connecting with third-party clients.
    #[serde(rename = "domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// The unique ID for this cluster.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The region where this cluster is located.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The base URL for this cluster used when hosting static sites.
    #[serde(rename = "static_site_domain", skip_serializing_if = "Option::is_none")]
    pub static_site_domain: Option<String>,
    /// This cluster's status.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<StatusEnum>,
}

impl GetObjectStorageClusters200ResponseDataInner {
    /// An Object Storage Cluster.
    pub fn new() -> GetObjectStorageClusters200ResponseDataInner {
        GetObjectStorageClusters200ResponseDataInner {
            domain: None,
            id: None,
            region: None,
            static_site_domain: None,
            status: None,
        }
    }
}
/// This cluster's status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusEnum {
    #[serde(rename = "available")]
    Available,
    #[serde(rename = "unavailable")]
    Unavailable,
}

impl Default for StatusEnum {
    fn default() -> StatusEnum {
        Self::Available
    }
}

