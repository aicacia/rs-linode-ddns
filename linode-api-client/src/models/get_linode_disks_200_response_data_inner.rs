/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetLinodeDisks200ResponseDataInner {
    /// __Read-only__ When this disk was created.
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// __Limited availability__, __Read-only__ Displays if encryption is enabled on this disk. This setting is based on the `disk_encryption` setting of the Linode.
    #[serde(rename = "disk_encryption", skip_serializing_if = "Option::is_none")]
    pub disk_encryption: Option<String>,
    /// The disk's format or file system. A value of `raw` indicates no file system, just a raw binary stream. A value of `swap` indicates a Linux swap area. The values `ext3` or `ext4` represent these Linux journaling file systems. The value `ext2` is the deprecated ext2 Linux file system. Finally, `initrd` indicates the disk is formatted as an uncompressed initial RAM disk.  > ðŸ“˜ > > The `ext2` file system doesn't properly support timestamps and will be removed from Linux support in the near future. Also, `initrd` is a legacy format that no longer applies to most use cases. As a best practice, use the other supported formats or file systems instead.
    #[serde(rename = "filesystem", skip_serializing_if = "Option::is_none")]
    pub filesystem: Option<FilesystemEnum>,
    /// __Read-only__ This disk's ID. You need this value to run other operations that interact with the disk.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// __Filterable__ The name of the disk. This is for display purposes only.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// __Filterable__ The size of the disk in MB.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// __Read-only__ The current state of the disk.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<StatusEnum>,
    /// __Read-only__ When this disk was last updated.
    #[serde(rename = "updated", skip_serializing_if = "Option::is_none")]
    pub updated: Option<String>,
}

impl GetLinodeDisks200ResponseDataInner {
    pub fn new() -> GetLinodeDisks200ResponseDataInner {
        GetLinodeDisks200ResponseDataInner {
            created: None,
            disk_encryption: None,
            filesystem: None,
            id: None,
            label: None,
            size: None,
            status: None,
            updated: None,
        }
    }
}
/// The disk's format or file system. A value of `raw` indicates no file system, just a raw binary stream. A value of `swap` indicates a Linux swap area. The values `ext3` or `ext4` represent these Linux journaling file systems. The value `ext2` is the deprecated ext2 Linux file system. Finally, `initrd` indicates the disk is formatted as an uncompressed initial RAM disk.  > ðŸ“˜ > > The `ext2` file system doesn't properly support timestamps and will be removed from Linux support in the near future. Also, `initrd` is a legacy format that no longer applies to most use cases. As a best practice, use the other supported formats or file systems instead.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FilesystemEnum {
    #[serde(rename = "raw")]
    Raw,
    #[serde(rename = "swap")]
    Swap,
    #[serde(rename = "ext2")]
    Ext2,
    #[serde(rename = "ext3")]
    Ext3,
    #[serde(rename = "ext4")]
    Ext4,
    #[serde(rename = "initrd")]
    Initrd,
}

impl Default for FilesystemEnum {
    fn default() -> FilesystemEnum {
        Self::Raw
    }
}
/// __Read-only__ The current state of the disk.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusEnum {
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "not ready")]
    NotReady,
    #[serde(rename = "deleting")]
    Deleting,
}

impl Default for StatusEnum {
    fn default() -> StatusEnum {
        Self::Ready
    }
}

