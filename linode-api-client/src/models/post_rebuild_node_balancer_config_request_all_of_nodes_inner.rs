/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PostRebuildNodeBalancerConfigRequestAllOfNodesInner : NodeBalancer node request object including ID.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostRebuildNodeBalancerConfigRequestAllOfNodesInner {
    /// The private IP Address where this backend can be reached. This _must_ be a private IP address.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The unique ID of the Node to update.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The label for this node.  This is for display purposes only.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// The mode this NodeBalancer should use when sending traffic to this backend.  - If set to `accept` this backend is accepting traffic. - If set to `reject` this backend will not receive traffic. - If set to `drain` this backend will not receive _new_ traffic, but connections already pinned to it will continue to be routed to it. - If set to `backup`, this backend will only receive traffic if all `accept` nodes are down.
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<ModeEnum>,
    /// Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
}

impl PostRebuildNodeBalancerConfigRequestAllOfNodesInner {
    /// NodeBalancer node request object including ID.
    pub fn new() -> PostRebuildNodeBalancerConfigRequestAllOfNodesInner {
        PostRebuildNodeBalancerConfigRequestAllOfNodesInner {
            address: None,
            id: None,
            label: None,
            mode: None,
            weight: None,
        }
    }
}
/// The mode this NodeBalancer should use when sending traffic to this backend.  - If set to `accept` this backend is accepting traffic. - If set to `reject` this backend will not receive traffic. - If set to `drain` this backend will not receive _new_ traffic, but connections already pinned to it will continue to be routed to it. - If set to `backup`, this backend will only receive traffic if all `accept` nodes are down.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ModeEnum {
    #[serde(rename = "accept")]
    Accept,
    #[serde(rename = "reject")]
    Reject,
    #[serde(rename = "drain")]
    Drain,
    #[serde(rename = "backup")]
    Backup,
}

impl Default for ModeEnum {
    fn default() -> ModeEnum {
        Self::Accept
    }
}

