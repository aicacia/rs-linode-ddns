/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PutDatabasesMysqlInstanceRequest : Updated information for the Managed MySQL Database.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PutDatabasesMysqlInstanceRequest {
    /// Controls access to the Managed Database.  - Individually included IP addresses or CIDR ranges can access the Managed Database while all other sources are blocked.  - A standalone value of `0.0.0.0/0` allows all IP addresses access to the Managed Database.  - An empty array (`[]`) blocks all public and private connections to the Managed Database.
    #[serde(rename = "allow_list", skip_serializing_if = "Option::is_none")]
    pub allow_list: Option<Vec<String>>,
    /// __Filterable__ A unique, user-defined string referring to the Managed Database. This string needs to be unique per Managed Database engine type.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Request re-sizing of your cluster to a Linode Type with more disk space. For example, you could request a Linode Type that uses a higher plan.  - Needs to be a Linode Type with more disk space than your current Linode.  - Resizing to a larger Linode Type can accrue additional cost. Review the `price` output in the [List types](https://techdocs.akamai.com/linode-api/reference/get-linode-types) operation for more information.  - You can't update the `allow_list` and set a new `type` in the same request.  - Any active updates to your cluster need to complete before you can request a resize. The reverse is also true: An active resizing needs to complete before you can perform any other update.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "updates", skip_serializing_if = "Option::is_none")]
    pub updates: Option<models::GetDatabasesInstances200ResponseAllOfDataInnerUpdates>,
    /// __Filterable__ The Managed Database engine version.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl PutDatabasesMysqlInstanceRequest {
    /// Updated information for the Managed MySQL Database.
    pub fn new() -> PutDatabasesMysqlInstanceRequest {
        PutDatabasesMysqlInstanceRequest {
            allow_list: None,
            label: None,
            r#type: None,
            updates: None,
            version: None,
        }
    }
}

