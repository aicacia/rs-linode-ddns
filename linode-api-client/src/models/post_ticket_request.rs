/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PostTicketRequest : An object representing a created support ticket that contains a question or issue and request for help from the Linode support team.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostTicketRequest {
    /// The name of an Object Storage bucket entity for this ticket. Run the [List Object Storage buckets](https://techdocs.akamai.com/linode-api/reference/get-object-storage-buckets) operation and store the `label` for the target bucket. You also need to provide the specific `region` where the bucket is located.
    #[serde(rename = "bucket", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bucket: Option<Option<String>>,
    /// The ID of the Managed Database entity for the ticket. Run the [List Managed Databases](https://techdocs.akamai.com/linode-api/reference/get-databases-instances) operation and store the `id` for the target database.
    #[serde(rename = "database_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub database_id: Option<Option<i32>>,
    /// The full details of the issue or question.
    #[serde(rename = "description")]
    pub description: String,
    /// The ID of the domain entity for the ticket. Run the [List domains](https://techdocs.akamai.com/linode-api/reference/get-domains) operation and store the `id` for the target domain.
    #[serde(rename = "domain_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub domain_id: Option<Option<i32>>,
    /// The ID of the Firewall entity for the ticket. Run the [List a Linode's firewalls](https://techdocs.akamai.com/linode-api/reference/get-linode-firewalls) operation and store the `id` for the target Linode firewall.
    #[serde(rename = "firewall_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub firewall_id: Option<Option<i32>>,
    /// The ID of the Linode entity for the ticket. Run the [List Linodes](https://techdocs.akamai.com/linode-api/reference/get-linode-instances) operation and store the `id` for the target Linode.
    #[serde(rename = "linode_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub linode_id: Option<Option<i32>>,
    /// The ID of the Linode Kubernetes Engine (LKE) cluster entity for the ticket. Run the [List Kubernetes clusters](https://techdocs.akamai.com/linode-api/reference/get-lke-clusters) operation and store the `id` for the target LKE cluster.
    #[serde(rename = "lkecluster_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lkecluster_id: Option<Option<i32>>,
    /// The ID of the Longview client entity for the ticket. Run the [List Longview clients](https://techdocs.akamai.com/linode-api/reference/get-longview-clients) operation and store the `id` for the target client.
    #[serde(rename = "longviewclient_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub longviewclient_id: Option<Option<i32>>,
    /// Whether this ticket is related to a [managed service](https://www.linode.com/products/managed/). If `true`, the following constraints apply:  - You can't provide an entity, such as a `linode_id` or `bucket` with this request.  - Your account needs a managed service [enabled](https://techdocs.akamai.com/linode-api/reference/post-enable-managed-service).
    #[serde(rename = "managed_issue", skip_serializing_if = "Option::is_none")]
    pub managed_issue: Option<bool>,
    /// The ID of the NodeBalancer entity for the ticket. Run the [List NodeBalancers](https://techdocs.akamai.com/linode-api/reference/get-node-balancers) operation and store the `id` for the target NodeBalancer.
    #[serde(rename = "nodebalancer_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub nodebalancer_id: Option<Option<i32>>,
    /// The ID of the [region](https://techdocs.akamai.com/linode-api/reference/get-regions) where this ticket's target entity resides. This only applies to tickets for a `vlan` or an Object Storage  `bucket`.  > ðŸ“˜ > > Set this to the `clusterId` for a legacy Object Storage `bucket`.
    #[serde(rename = "region", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub region: Option<Option<String>>,
    /// The summary or title for this support ticket.
    #[serde(rename = "summary")]
    pub summary: String,
    /// The label of the VLAN entity for the ticket. Run the [List VLANs](https://techdocs.akamai.com/linode-api/reference/get-vlans) operation and store the `id` for the target VLAN. You also need to provide the specific `region` where the VLAN is located.
    #[serde(rename = "vlan", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vlan: Option<Option<String>>,
    /// The ID of the volume entity for the ticket. Run the [List volumes](https://techdocs.akamai.com/linode-api/reference/get-volumes) operation and store the `id` for the target volume.
    #[serde(rename = "volume_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub volume_id: Option<Option<i32>>,
    /// The ID of the VPC entity for the ticket. Run the [List VPCs](https://techdocs.akamai.com/linode-api/reference/get-vpcs) operation and store the `id` for the target VPC.
    #[serde(rename = "vpc_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vpc_id: Option<Option<i32>>,
}

impl PostTicketRequest {
    /// An object representing a created support ticket that contains a question or issue and request for help from the Linode support team.
    pub fn new(description: String, summary: String) -> PostTicketRequest {
        PostTicketRequest {
            bucket: None,
            database_id: None,
            description,
            domain_id: None,
            firewall_id: None,
            linode_id: None,
            lkecluster_id: None,
            longviewclient_id: None,
            managed_issue: None,
            nodebalancer_id: None,
            region: None,
            summary,
            vlan: None,
            volume_id: None,
            vpc_id: None,
        }
    }
}

