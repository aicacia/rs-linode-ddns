/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Domain1 : A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Domain1 {
    /// The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.  __Note__. This is potentially dangerous, and should be set to an empty list unless you intend to use it.
    #[serde(rename = "axfr_ips", skip_serializing_if = "Option::is_none")]
    pub axfr_ips: Option<Vec<String>>,
    /// A description for this Domain. This is for display purposes only.
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    /// __Filterable__ The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
    #[serde(rename = "domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// The amount of time in seconds that may pass before this Domain is no longer authoritative.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 1209600.
    #[serde(rename = "expire_sec", skip_serializing_if = "Option::is_none")]
    pub expire_sec: Option<i32>,
    /// __Filterable__ The group this Domain belongs to.  This is for display purposes only.
    #[serde(rename = "group", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub group: Option<Option<String>>,
    /// __Read-only__ This Domain's unique ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
    #[serde(rename = "master_ips", skip_serializing_if = "Option::is_none")]
    pub master_ips: Option<Vec<String>>,
    /// The amount of time in seconds before this Domain should be refreshed.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 14400.
    #[serde(rename = "refresh_sec", skip_serializing_if = "Option::is_none")]
    pub refresh_sec: Option<i32>,
    /// The interval, in seconds, at which a failed refresh should be retried.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 14400.
    #[serde(rename = "retry_sec", skip_serializing_if = "Option::is_none")]
    pub retry_sec: Option<i32>,
    /// Start of Authority email address. This is required for `type` master Domains.
    #[serde(rename = "soa_email", skip_serializing_if = "Option::is_none")]
    pub soa_email: Option<String>,
    /// Used to control whether this Domain is currently being rendered.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<StatusEnum>,
    /// __Filterable__ An array of tags applied to this object.  Tags are for organizational purposes only.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// \"Time to Live\" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200. - Any other value is rounded up to the nearest valid value. - A value of 0 is equivalent to the default value of 86400.
    #[serde(rename = "ttl_sec", skip_serializing_if = "Option::is_none")]
    pub ttl_sec: Option<i32>,
    /// Whether this Domain represents the authoritative source of information for the domain it describes (`master`), or whether it is a read-only copy of a master (`slave`).
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<TypeEnum>,
}

impl Domain1 {
    /// A domain zonefile in our DNS system.  You must own the domain name and tell your registrar to use Linode's nameservers in order for a domain in our system to be treated as authoritative.
    pub fn new() -> Domain1 {
        Domain1 {
            axfr_ips: None,
            description: None,
            domain: None,
            expire_sec: None,
            group: None,
            id: None,
            master_ips: None,
            refresh_sec: None,
            retry_sec: None,
            soa_email: None,
            status: None,
            tags: None,
            ttl_sec: None,
            r#type: None,
        }
    }
}
/// Used to control whether this Domain is currently being rendered.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusEnum {
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "active")]
    Active,
}

impl Default for StatusEnum {
    fn default() -> StatusEnum {
        Self::Disabled
    }
}
/// Whether this Domain represents the authoritative source of information for the domain it describes (`master`), or whether it is a read-only copy of a master (`slave`).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeEnum {
    #[serde(rename = "master")]
    Master,
    #[serde(rename = "slave")]
    Slave,
}

impl Default for TypeEnum {
    fn default() -> TypeEnum {
        Self::Master
    }
}

