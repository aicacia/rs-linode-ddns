/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostObjectStorageKeysRequestBucketAccessInner {
    /// The `label` set for a bucket that this key grants access to.
    #[serde(rename = "bucket_name", skip_serializing_if = "Option::is_none")]
    pub bucket_name: Option<String>,
    /// The level of access the key grants to the specified `bucket_name`. Keys with `read_write` access can manage content in the `bucket_name`, while `read_only` can be used to view content. See [Create an Object Storage key]((ref:post-object-storage-keys) for more details.
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<PermissionsEnum>,
    /// The region where the `bucket_name` you want the key to access is located.  > ðŸ“˜ > > If you repeat the same `region` across objects, the response includes a single `s3_endpoint` for this region. Use it to access all `bucket_name` entries.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

impl PostObjectStorageKeysRequestBucketAccessInner {
    pub fn new() -> PostObjectStorageKeysRequestBucketAccessInner {
        PostObjectStorageKeysRequestBucketAccessInner {
            bucket_name: None,
            permissions: None,
            region: None,
        }
    }
}
/// The level of access the key grants to the specified `bucket_name`. Keys with `read_write` access can manage content in the `bucket_name`, while `read_only` can be used to view content. See [Create an Object Storage key]((ref:post-object-storage-keys) for more details.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PermissionsEnum {
    #[serde(rename = "read_write")]
    ReadWrite,
    #[serde(rename = "read_only")]
    ReadOnly,
}

impl Default for PermissionsEnum {
    fn default() -> PermissionsEnum {
        Self::ReadWrite
    }
}

