/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GetLkeClusterNode200Response : __Read-only__ Status information for a Node which is a member of a Kubernetes cluster.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetLkeClusterNode200Response {
    /// The Node's ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The Linode's ID. When no Linode is currently provisioned for this Node, this will be `null`.
    #[serde(rename = "instance_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub instance_id: Option<Option<i32>>,
    /// The creation status of this Node. This status is distinct from this Node's readiness as a Kubernetes Node Object as determined by the command `kubectl get nodes`.  `not_ready` indicates that the Linode is still being created.  `ready` indicates that the Linode has successfully been created and is running Kubernetes software.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<StatusEnum>,
}

impl GetLkeClusterNode200Response {
    /// __Read-only__ Status information for a Node which is a member of a Kubernetes cluster.
    pub fn new() -> GetLkeClusterNode200Response {
        GetLkeClusterNode200Response {
            id: None,
            instance_id: None,
            status: None,
        }
    }
}
/// The creation status of this Node. This status is distinct from this Node's readiness as a Kubernetes Node Object as determined by the command `kubectl get nodes`.  `not_ready` indicates that the Linode is still being created.  `ready` indicates that the Linode has successfully been created and is running Kubernetes software.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatusEnum {
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "not_ready")]
    NotReady,
}

impl Default for StatusEnum {
    fn default() -> StatusEnum {
        Self::Ready
    }
}

