/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines.
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};

/// struct for typed errors of method [`get_client_thumbnail`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetClientThumbnailError {
  DefaultResponse(models::GetAccountDefaultResponse),
  UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_client_thumbnail`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutClientThumbnailError {
  DefaultResponse(models::GetAccountDefaultResponse),
  UnknownValue(serde_json::Value),
}

/// Returns the PNG thumbnail for this OAuth Client.  This is a publicly viewable endpoint, and can be accessed without authentication.
pub async fn get_client_thumbnail(
  configuration: &configuration::Configuration,
  api_version: &str,
  client_id: &str,
) -> Result<reqwest::Response, Error<GetClientThumbnailError>> {
  // add a prefix to parameters to efficiently prevent name collisions
  let p_api_version = api_version;
  let p_client_id = client_id;

  let uri_str = format!(
    "{}/{apiVersion}/account/oauth-clients/{clientId}/thumbnail",
    configuration.base_path,
    apiVersion = crate::apis::urlencode(p_api_version),
    clientId = crate::apis::urlencode(p_client_id)
  );
  let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

  if let Some(ref user_agent) = configuration.user_agent {
    req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
  }

  let req = req_builder.build()?;
  let resp = configuration.client.execute(req).await?;

  let status = resp.status();

  if !status.is_client_error() && !status.is_server_error() {
    Ok(resp)
  } else {
    let content = resp.text().await?;
    let entity: Option<GetClientThumbnailError> = serde_json::from_str(&content).ok();
    Err(Error::ResponseError(ResponseContent {
      status,
      content,
      entity,
    }))
  }
}

/// Upload a thumbnail for a client you own.  You must upload a PNG image file that will be returned when the thumbnail is retrieved.  This image will be publicly viewable.   <<LB>>  ---   - __OAuth scopes__.      ```     account:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn put_client_thumbnail(
  _configuration: &configuration::Configuration,
  _api_version: &str,
  _client_id: &str,
  _body: std::path::PathBuf,
) -> Result<serde_json::Value, Error<PutClientThumbnailError>> {
  unimplemented!()
}
