/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`delete_linode_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteLinodeConfigError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_node_balancer_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteNodeBalancerConfigError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_linode_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLinodeConfigError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_linode_configs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLinodeConfigsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_node_balancer_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetNodeBalancerConfigError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_node_balancer_configs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetNodeBalancerConfigsError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_add_linode_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostAddLinodeConfigError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_node_balancer_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostNodeBalancerConfigError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_rebuild_node_balancer_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostRebuildNodeBalancerConfigError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_linode_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutLinodeConfigError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_node_balancer_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutNodeBalancerConfigError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}


/// Deletes the specified configuration profile from the specified Linode.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-delete 123 23456     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn delete_linode_config(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, config_id: i32) -> Result<serde_json::Value, Error<DeleteLinodeConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_config_id = config_id;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs/{configId}", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteLinodeConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes the Config for a port of this NodeBalancer.  __This cannot be undone.__  Once completed, this NodeBalancer will no longer respond to requests on the given port. This also deletes all associated NodeBalancerNodes, but the Linodes they were routing traffic to will be unchanged and will not be removed.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers config-delete \\   12345 4567     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn delete_node_balancer_config(configuration: &configuration::Configuration, api_version: &str, node_balancer_id: i32, config_id: i32) -> Result<serde_json::Value, Error<DeleteNodeBalancerConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_node_balancer_id = node_balancer_id;
    let p_config_id = config_id;

    let uri_str = format!("{}/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), nodeBalancerId=p_node_balancer_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteNodeBalancerConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns information about a specific configuration profile.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-view 123 23456     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn get_linode_config(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, config_id: i32) -> Result<models::GetLinodeConfig200Response, Error<GetLinodeConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_config_id = config_id;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs/{configId}", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLinodeConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Lists configuration profiles associated with a Linode.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes configs-list 123     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn get_linode_configs(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, page: Option<i32>, page_size: Option<i32>) -> Result<models::GetLinodeConfigs200Response, Error<GetLinodeConfigsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_page = page;
    let p_page_size = page_size;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_size {
        req_builder = req_builder.query(&[("page_size", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLinodeConfigsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns configuration information for a single port of this NodeBalancer.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers config-view \\   12345 4567     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     nodebalancers:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn get_node_balancer_config(configuration: &configuration::Configuration, api_version: &str, node_balancer_id: i32, config_id: i32) -> Result<models::GetNodeBalancerConfigs200ResponseDataInner, Error<GetNodeBalancerConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_node_balancer_id = node_balancer_id;
    let p_config_id = config_id;

    let uri_str = format!("{}/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), nodeBalancerId=p_node_balancer_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetNodeBalancerConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a paginated list of NodeBalancer Configs associated with this NodeBalancer. NodeBalancer Configs represent individual ports that this NodeBalancer will accept traffic on, one Config per port.  For example, if you wanted to accept standard HTTP traffic, you would need a Config listening on port 80.   <<LB>>  ---   - __CLI__.      ```     linode-cli nodebalancers configs-list 12345     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     nodebalancers:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn get_node_balancer_configs(configuration: &configuration::Configuration, api_version: &str, node_balancer_id: i32, page: Option<i32>, page_size: Option<i32>) -> Result<models::GetNodeBalancerConfigs200Response, Error<GetNodeBalancerConfigsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_node_balancer_id = node_balancer_id;
    let p_page = page;
    let p_page_size = page_size;

    let uri_str = format!("{}/{apiVersion}/nodebalancers/{nodeBalancerId}/configs", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), nodeBalancerId=p_node_balancer_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_size {
        req_builder = req_builder.query(&[("page_size", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetNodeBalancerConfigsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Adds a new configuration profile to a Linode.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-create 7590910 \\   --label \"My Config\" \\   --devices.sda.disk_id 123456 \\   --devices.sdb.disk_id 123457     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn post_add_linode_config(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, post_add_linode_config_request: models::PostAddLinodeConfigRequest) -> Result<models::PostAddLinodeConfig200Response, Error<PostAddLinodeConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_post_add_linode_config_request = post_add_linode_config_request;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_post_add_linode_config_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<PostAddLinodeConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a NodeBalancer configuration, which allows the NodeBalancer to accept traffic on a new port. You will need to add NodeBalancer nodes to the new configuration before it can actually serve requests.   <<LB>>  ---   - __CLI: HTTPS__.      ```     linode-cli nodebalancers config-create 12345 \\   --port 443 \\   --protocol https \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\   --check_passive true \\   --proxy_protocol \"none\" \\   --ssl_cert \"-----BEGIN CERTIFICATE-----               CERTIFICATE_INFORMATION               -----END CERTIFICATE-----\" \\   --ssl_key \"-----BEGIN PRIVATE KEY-----              PRIVATE_KEY_INFORMATION              -----END PRIVATE KEY-----\" \\   --cipher_suite recommended \\     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __CLI: TCP__.      ```     linode-cli nodebalancers config-create 12345 \\   --port 80 \\   --protocol tcp \\   --algorithm roundrobin \\   --stickiness none \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\   --proxy_protocol \"v2\"     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __CLI: HTTP__.      ```     linode-cli nodebalancers config-create 12345 \\   --port 440 \\   --protocol http \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn post_node_balancer_config(configuration: &configuration::Configuration, api_version: &str, node_balancer_id: i32, get_node_balancer_configs200_response_data_inner: Option<models::GetNodeBalancerConfigs200ResponseDataInner>) -> Result<models::GetNodeBalancerConfigs200ResponseDataInner, Error<PostNodeBalancerConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_node_balancer_id = node_balancer_id;
    let p_get_node_balancer_configs200_response_data_inner = get_node_balancer_configs200_response_data_inner;

    let uri_str = format!("{}/{apiVersion}/nodebalancers/{nodeBalancerId}/configs", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), nodeBalancerId=p_node_balancer_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_get_node_balancer_configs200_response_data_inner);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<PostNodeBalancerConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Rebuilds a NodeBalancer Config and its Nodes that you have permission to modify.  Use this operation to update a NodeBalancer's Config and Nodes with a single request.   <<LB>>  ---   - __CLI: HTTPS__.      ```     linode-cli nodebalancers config-rebuild \\   12345 4567 \\   --port 443 \\   --protocol https \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\   --check_passive true \\   --proxy_protocol \"none\" \\   --ssl_cert \"-----BEGIN CERTIFICATE-----               CERTIFICATE_INFORMATION               -----END CERTIFICATE-----\" \\   --ssl_key \"-----BEGIN PRIVATE KEY-----              PRIVATE_KEY_INFORMATION              -----END PRIVATE KEY-----\" \\   --cipher_suite recommended \\   --nodes.label \"node1\" --nodes.address \"192.168.210.120:80\" --nodes.mode \"accept\" --nodes.weight 50 \\   --nodes '[{\"address\":\"192.168.210.122:80\",\"label\":\"node2\",\"weight\":50,\"mode\":\"accept\"}]'     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __CLI: TCP__.      ```     linode-cli nodebalancers config-rebuild \\   12345 4567 \\   --port 80 \\   --protocol tcp \\   --algorithm roundrobin \\   --stickiness none \\   --proxy_protocol \"v2\"   --nodes.label \"node1\" --nodes.address \"192.168.210.120:80\" --nodes.mode \"accept\" --nodes.weight 50 \\   --nodes '[{\"address\":\"192.168.210.122:80\",\"label\":\"node2\",\"weight\":50,\"mode\":\"accept\"}]'     ```      [Learn more...](https://www.linode.com/docs/products/tools/cli/get-started/)  - __CLI: HTTP__.      ```     linode-cli nodebalancers config-rebuild \\   12345 4567 \\   --port 440 \\   --protocol http \\   --algorithm roundrobin \\   --stickiness none \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\   --nodes.label \"node1\" --nodes.address \"192.168.210.120:80\" --nodes.mode \"accept\" --nodes.weight 50 \\   --nodes '[{\"address\":\"192.168.210.122:80\",\"label\":\"node2\",\"weight\":50,\"mode\":\"accept\"}]'     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn post_rebuild_node_balancer_config(configuration: &configuration::Configuration, api_version: &str, node_balancer_id: i32, config_id: i32, post_rebuild_node_balancer_config_request: models::PostRebuildNodeBalancerConfigRequest) -> Result<models::GetNodeBalancerConfigs200ResponseDataInner, Error<PostRebuildNodeBalancerConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_node_balancer_id = node_balancer_id;
    let p_config_id = config_id;
    let p_post_rebuild_node_balancer_config_request = post_rebuild_node_balancer_config_request;

    let uri_str = format!("{}/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}/rebuild", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), nodeBalancerId=p_node_balancer_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_post_rebuild_node_balancer_config_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<PostRebuildNodeBalancerConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates a configuration profile.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-update 123 23456 \\   --kernel \"linode/latest-64bit\" \\   --comments \"This is my main Config\" \\   --memory_limit 2048 \\   --run_level default \\   --virt_mode paravirt \\   --helpers.updatedb_disabled true \\   --helpers.distro true \\   --helpers.modules_dep true \\   --helpers.network true \\   --helpers.devtmpfs_automount false \\   --label \"My Config\" \\   --devices.sda.disk_id 123456 \\   --devices.sdb.disk_id 123457     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn put_linode_config(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, config_id: i32, put_linode_config_request: models::PutLinodeConfigRequest) -> Result<models::PutLinodeConfig200Response, Error<PutLinodeConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_config_id = config_id;
    let p_put_linode_config_request = put_linode_config_request;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs/{configId}", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_put_linode_config_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<PutLinodeConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates the configuration for a single port on a NodeBalancer.   <<LB>>  ---   - __CLI: HTTPS__.      ```     linode-cli nodebalancers config-update \\   12345 4567 \\   --port 443 \\   --protocol https \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\   --check_passive true \\   --proxy_protocol \"none\" \\   --ssl_cert \"-----BEGIN CERTIFICATE-----               CERTIFICATE_INFORMATION               -----END CERTIFICATE-----\" \\   --ssl_key \"-----BEGIN PRIVATE KEY-----              PRIVATE_KEY_INFORMATION              -----END PRIVATE KEY-----\" \\   --cipher_suite recommended     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __CLI: TCP__.      ```     linode-cli nodebalancers config-update \\   12345 4567 \\   --port 80 \\   --protocol tcp \\   --algorithm roundrobin \\   --stickiness none \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\   --proxy_protocol \"v2\"     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __CLI: HTTP__.      ```     linode-cli nodebalancers config-update \\   12345 4567 \\   --port 440 \\   --protocol http \\   --algorithm roundrobin \\   --stickiness http_cookie \\   --check http_body \\   --check_interval 90 \\   --check_timeout 10 \\   --check_attempts 3 \\   --check_path \"/test\" \\   --check_body \"it works\" \\     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     nodebalancers:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn put_node_balancer_config(configuration: &configuration::Configuration, api_version: &str, node_balancer_id: i32, config_id: i32, get_node_balancer_configs200_response_data_inner: models::GetNodeBalancerConfigs200ResponseDataInner) -> Result<models::GetNodeBalancerConfigs200ResponseDataInner, Error<PutNodeBalancerConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_node_balancer_id = node_balancer_id;
    let p_config_id = config_id;
    let p_get_node_balancer_configs200_response_data_inner = get_node_balancer_configs200_response_data_inner;

    let uri_str = format!("{}/{apiVersion}/nodebalancers/{nodeBalancerId}/configs/{configId}", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), nodeBalancerId=p_node_balancer_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_get_node_balancer_configs200_response_data_inner);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<PutNodeBalancerConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

