/*
 * Akamai: Linode API
 *
 * Add a Cloud Computing instance so you can build, release, and scale applications faster with virtual machines. 
 *
 * The version of the OpenAPI document: 4.193.0
 * Contact: jperez@linode.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`delete_linode_config_interface`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteLinodeConfigInterfaceError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_linode_config_interface`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLinodeConfigInterfaceError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_linode_config_interfaces`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLinodeConfigInterfacesError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_linode_config_interface`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostLinodeConfigInterfaceError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_linode_config_interfaces`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostLinodeConfigInterfacesError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_linode_config_interface`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutLinodeConfigInterfaceError {
    DefaultResponse(models::GetAccountDefaultResponse),
    UnknownValue(serde_json::Value),
}


/// Deletes a configuration profile interface from a specific configuration profile, on a specific Linode.  - To access this operation, your user needs the `read_write` [grant](https://techdocs.akamai.com/linode-api/reference/get-user-grants) for the Linode.  - A successful request triggers a `linode_config_update` [event](https://techdocs.akamai.com/linode-api/reference/get-events).  - You can't delete an active configuration profile interface. First, you need to shut down the associated Linode or restart it using another configuration profile.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-interface-delete $linodeId $configId $interfaceId     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn delete_linode_config_interface(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, config_id: i32, interface_id: i32) -> Result<serde_json::Value, Error<DeleteLinodeConfigInterfaceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_config_id = config_id;
    let p_interface_id = interface_id;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs/{configId}/interfaces/{interfaceId}", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id, configId=p_config_id, interfaceId=p_interface_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteLinodeConfigInterfaceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns a single configuration profile interface. To access this operation, your user needs at least the `read_only` [grant](https://techdocs.akamai.com/linode-api/reference/get-user-grants) for the Linode.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-interface-view $linodeId $configId $interfaceId     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn get_linode_config_interface(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, config_id: i32, interface_id: i32) -> Result<models::GetLinodeConfigInterface200Response, Error<GetLinodeConfigInterfaceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_config_id = config_id;
    let p_interface_id = interface_id;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs/{configId}/interfaces/{interfaceId}", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id, configId=p_config_id, interfaceId=p_interface_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLinodeConfigInterfaceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Returns all configuration profile interfaces assigned to a specific configuration profile, on a specific Linode. To access this operation, your user needs the `read_write` [grant](https://techdocs.akamai.com/linode-api/reference/get-user-grants) for the Linode.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-interfaces-list $linodeId $configId     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_only     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn get_linode_config_interfaces(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, config_id: i32) -> Result<Vec<models::GetLinodeConfigInterfaces200ResponseInner>, Error<GetLinodeConfigInterfacesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_config_id = config_id;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs/{configId}/interfaces", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetLinodeConfigInterfacesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates and appends a single interface to the end of the `interfaces` array for an existing configuration profile. After you add the interface, you need to reboot the target Linode.  - To access this operation, your user needs the `read_write` [grant](https://techdocs.akamai.com/linode-api/reference/get-user-grants) for the Linode.  - A successful request triggers a `linode_config_update` [event](https://techdocs.akamai.com/linode-api/reference/get-events).  - Only one interface can be set as `primary`. Setting `primary` to `true` for an interface sets all other interfaces to `false`.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-interface-add $linodeId $configId \\   --purpose vpc \\   --primary false \\   --subnet_id 101 \\   --ipv4.vpc \"10.0.1.2\" \\   --ipv4.nat_1_1 \"203.0.113.2\"     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn post_linode_config_interface(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, config_id: i32, post_linode_config_interface_request: models::PostLinodeConfigInterfaceRequest) -> Result<models::PostLinodeConfigInterface200Response, Error<PostLinodeConfigInterfaceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_config_id = config_id;
    let p_post_linode_config_interface_request = post_linode_config_interface_request;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs/{configId}/interfaces", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_post_linode_config_interface_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<PostLinodeConfigInterfaceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Reorders the existing Interfaces of a Configuration Profile.  - The User accessing this operation must have `read_write` grants to the Linode.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-interfaces-order $linodeId $configId \\   --ids 101 --ids 102 --ids 103     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn post_linode_config_interfaces(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, config_id: i32, post_linode_config_interfaces_request: models::PostLinodeConfigInterfacesRequest) -> Result<serde_json::Value, Error<PostLinodeConfigInterfacesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_config_id = config_id;
    let p_post_linode_config_interfaces_request = post_linode_config_interfaces_request;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs/{configId}/interfaces/order", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id, configId=p_config_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_post_linode_config_interfaces_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<PostLinodeConfigInterfacesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Update a `vpc` or `public` configuration profile interface for a specific configuration profile, on a specific Linode.  - To access this operation, your user needs the `read_write` [grant](https://techdocs.akamai.com/linode-api/reference/get-user-grants) for the Linode.  - A successful request triggers a `linode_config_update` [event](https://techdocs.akamai.com/linode-api/reference/get-events).  - Only certain attributes can be updated for a configuration profile interface. You need to [add](https://techdocs.akamai.com/linode-api/reference/post-linode-config-interface) a new configuration profile interface on your Linode if you need new values for any other attribute. Here are the supported objects, based on the interface's `purpose`:    - `public`. The `primary` attribute.    - `vpc`. The `ip_ranges`, `ipv4`, or `primary` attributes.  - You can't update a configuration profile with a `purpose` of `vlan`.   <<LB>>  ---   - __CLI__.      ```     linode-cli linodes config-interface-update $linodeId $configId $interfaceId \\   --primary true \\   --ipv4.vpc \"10.0.1.2\" \\   --ipv4.nat_1_1 \"203.0.113.2\"     ```      [Learn more...](https://techdocs.akamai.com/cloud-computing/docs/getting-started-with-the-linode-cli)  - __OAuth scopes__.      ```     linodes:read_write     ```      [Learn more...](https://techdocs.akamai.com/linode-api/reference/get-started#oauth)
pub async fn put_linode_config_interface(configuration: &configuration::Configuration, api_version: &str, linode_id: i32, config_id: i32, interface_id: i32, put_linode_config_interface_request: models::PutLinodeConfigInterfaceRequest) -> Result<models::PutLinodeConfigInterface200Response, Error<PutLinodeConfigInterfaceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_api_version = api_version;
    let p_linode_id = linode_id;
    let p_config_id = config_id;
    let p_interface_id = interface_id;
    let p_put_linode_config_interface_request = put_linode_config_interface_request;

    let uri_str = format!("{}/{apiVersion}/linode/instances/{linodeId}/configs/{configId}/interfaces/{interfaceId}", configuration.base_path, apiVersion=crate::apis::urlencode(p_api_version), linodeId=p_linode_id, configId=p_config_id, interfaceId=p_interface_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_put_linode_config_interface_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<PutLinodeConfigInterfaceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

